<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sturmschneid]]></title>
  <link href="http://ch.ege.io/atom.xml" rel="self"/>
  <link href="http://ch.ege.io/"/>
  <updated>2015-10-31T18:42:32+01:00</updated>
  <id>http://ch.ege.io/</id>
  <author>
    <name><![CDATA[Christian Ege]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Attaching a Serial Console to UDOO Neo]]></title>
    <link href="http://ch.ege.io/blog/2015/10/31/attaching-a-serial-console-to-udoo-neo/"/>
    <updated>2015-10-31T16:56:22+01:00</updated>
    <id>http://ch.ege.io/blog/2015/10/31/attaching-a-serial-console-to-udoo-neo</id>
    <content type="html"><![CDATA[<p>Yesterday my long time awaited <a href="http://www.udoo.org/udoo-neo/">UDOO Neo</a> board has arrived. They do provide a really good <a href="http://www.udoo.org/get-started-neo/">getting started guide</a> for UDOO Neo. But for my Yocto Port I need access to the serial console to check the output of the U-Boot and the kernel. So I&rsquo;ve checked the <a href="http://udoo.org/download/files/schematics/UDOO_NEO_schematics.pdf">UDOO Neo Schematics</a> and located UART1 on the connector J7.</p>

<p><img src="http://ch.ege.io/images/posts/UDOOUartNeo.png"></p>

<p>It is so incredible that they do provide the schematics. It is much easier to check the PINOUT. To connect the UDOO to a terminal client you need the following stuff</p>

<ul>
<li>1 x USB to serial converter with 3.3V output. Do not use any 5V type, this may damage your UDOO Neo! I use some cheap Chinese <a href="https://hackaday.com/tag/ch341">CH341</a> USB to UART converters. They cost about 3â‚¬ but are not FTDI clones.</li>
<li>3 Jumper wires. It depends on your USB to serial converter if you need male <-> male or female <-> male. I needed female <-> male connectors</li>
<li>1 x <a href="http://www.udoo.org/udoo-neo/">UDOO Neo board</a></li>
<li>1 x Powersupply for the Neo.</li>
<li>1 x Micro SD-Card with the UDOOBuntu or a <a href="http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo/">Yocto build</a> for UDOO Neo</li>
</ul>


<p>For power connection and flashing the SD-Card please have a look at the <a href="http://www.udoo.org/get-started-neo/">getting started guide</a> for UDOO Neo.</p>

<p>Before you plug-in the serial wires you have to remove any power source from the UDOO board. Otherwise you may damage your board. Double check if your adapter is a 3.3V. Connect the ground line (GND) of your USB to serial converter with the PIN 11 of the J7 connector. Then you have to connect the RX and TX PINs. But remember you have to cross them. Why do we need to cross RX and TX?</p>

<p>This is because <code>TX</code> is transmit and if the UDOO Board and your PC are transmitting on the same line nothing is received on both sides. So you have to connect the <code>RX</code> PIN of the UDOO board, PIN 4 of J7, with the <code>TX</code> PIN of your converter. The <code>TX</code>, PIN 2 of J7, from UDOO is connected to the <code>RX</code> PIN of converter.</p>

<p><img src="http://ch.ege.io/images/posts/UDOONeoAndUSBSeriell.png"></p>

<p>After this you can check <a href="http://www.udoo.org/tutorial/connecting-via-serial-cable/">their tutorial how to fire up an Terminal Emulator</a> on your Platform of choice and connect to the NEO at the following settings:</p>

<ul>
<li>115200 kB</li>
<li>8N1</li>
<li>No Flow-Control</li>
</ul>


<p>I do prefer minicom under Linux for this job.</p>

<h1>UDOO Neo direct USB console</h1>

<p>You may have noticed while booting the official <a href="http://www.udoo.org/get-started-neo/">UDOOBuntu image</a> image a new disk is suddenly mounted on your PC. And you have a new network interface connected as well. Last but not least even a new serial interface is available.</p>

<pre><code>[...]
[ 4885.463264] cdc_acm 4-1.4.1.1:1.2: ttyACM0: USB ACM device
[ 4885.463682] usbcore: registered new interface driver cdc_acm
[ 4885.463685] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
[...]
</code></pre>

<p>You can use minicom with <code>/dev/ttyACM0</code> and the same settings like above.</p>

<pre><code>Ubuntu 14.04.3 LTS udooneo ttyGS0


default username:password is [udooer:udooer]
udooneo login:
</code></pre>

<p>This is absolutely awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweaking Freescales Yocto Community BSP Builds]]></title>
    <link href="http://ch.ege.io/blog/2015/09/22/tweaking-freescales-yocto-community-bsp-builds/"/>
    <updated>2015-09-22T08:42:22+02:00</updated>
    <id>http://ch.ege.io/blog/2015/09/22/tweaking-freescales-yocto-community-bsp-builds</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/scrumnl">Maurice le Rutte</a> asked me on Twitter if it is possible to add support for the first UDOO board and building a <a href="https://en.wikipedia.org/wiki/DirectFB">DirectFB</a> enabled image. After some research it looked like a solution for the DirectFB task should be not that big issue.</p>

<p>I guess you have already a running Yocto environment based on the Freescale BSP comunity layers. To build a DirectFB image some tweaking is needed. You have to add those lines to your <code>conf/local.conf</code></p>

<pre><code>DISTRO_FEATURES_remove = "x11"
DISTRO_FEATURES_remove = "wayland"
DISTRO_FEATURES_append = " directfb"
</code></pre>

<p>The first two lines remove support for wayland and X11 which will conflict with DirectFB and will prevent a successful build. With this modification you can build a DirectFB image. The extra white space in front of directfb is mandatory!</p>

<pre><code>bitbake core-image-directfb
</code></pre>

<p>This is the right time to fetch some coffee.</p>

<p>Another tweak I prefer to do in the <code>conf/local.conf</code> is switching from RPM to IPK as package manager. It is more lightweight and a little bit faster than RPM or DEB. You only have to change the variable <code>PACKAGE_CLASSES</code> to <code>package_ipk</code></p>

<pre><code>PACKAGE_CLASSES ?= "package_ipk"
</code></pre>

<p>At the moment I am working on a Machine configuration for the <a href="http://www.udoo.org/udoo-dual-and-quad/">UDOO Quad board</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenEmbedded Support for the Upcomming UDOO Neo]]></title>
    <link href="http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo/"/>
    <updated>2015-09-19T19:18:03+02:00</updated>
    <id>http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo</id>
    <content type="html"><![CDATA[<p>After beeing part of the <a href="https://www.kickstarter.com/projects/udoo/udoo-neo-raspberry-pi-arduino-wi-fi-bt-40-sensors/?src=i1">Kickstarter campaign</a> for the <a href="http://www.udoo.org/udoo-neo/">UDOO NEO board</a>. I am looking forward to play with this little beast.</p>

<p><img class="center" src="http://cdn.udoo.org/wp-content/uploads/2015/03/UDOO_neo_up2_ks_funded.png"></p>

<p>During the meantime I decided to add the <a href="http://www.udoo.org/udoo-neo/">UDOO NEO board</a> to the <a href="https://github.com/Freescale/meta-fsl-arm-extra">Freescale OpenEmbedded community layer</a>. Due to the fact my board did not yet arrived I&rsquo;ve not yet created a patch to ask for integration into the official <a href="https://github.com/Freescale/meta-fsl-arm-extra">Freescale OpenEmbedded community layer</a>. This will be done when I&rsquo;ve tested the layer.</p>

<p>If you are interested in my work you can find my personal fork right <a href="https://github.com/graugans/meta-fsl-arm-extra/">here at github</a>.
You have to use the <a href="https://github.com/graugans/meta-fsl-arm-extra/tree/fido">fido</a> branch. To keep things simple I&rsquo;ve created my own
branch of the <a href="https://github.com/graugans/fsl-community-bsp-platform">fsl-community-bsp-platform</a> repo repository.</p>

<h1>Installing the BSP</h1>

<p>To get the BSP you need to have repo installed and use it as:</p>

<p>Install the repo utility:</p>

<pre><code>$: mkdir ~/bin
$: curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
$: chmod a+x ~/bin/repo
</code></pre>

<p>Download the BSP source:</p>

<pre><code>$: PATH=${PATH}:~/bin
$: mkdir fsl-community-bsp
$: cd fsl-community-bsp
$: repo init -u https://github.com/graugans/fsl-community-bsp-platform -b fido
$: repo sync
</code></pre>

<p>At the end of the commands you have every metadata you need to start work with.</p>

<h1>Building the Image</h1>

<p>To start a base image build execute the following command on a decent machine and grab some coffee&hellip;</p>

<p>$: source ./setup-environment udooneo-build
$: bitbake core-image-base</p>

<p>If everything was build fine you&rsquo;ll find a SD-Card image right here:</p>

<pre><code>tmp/deploy/images/udooneo/core-image-base-udooneo.sdcard
</code></pre>

<p>You can write this image directly to any supported SD-Card. Plug it into your freshly unboxed UDOO NEO and hopefully have fun. This image is completly untested and you have to use it on your own risk&hellip;</p>

<h1>Creating your personal Toolchain</h1>

<p>If you want to develop your own software for the UDOO Neo you&rsquo;ll need some cross toolchain. This can be achieved very easy with the OpenEmbedded universe.</p>

<pre><code>$ bitbake core-image-base -cpopulate_sdk
</code></pre>

<p>The resulting self extracting shell script you&rsquo;ll find right here:</p>

<pre><code>tmp/deploy/sdk/poky-glibc-x86_64-core-image-base-cortexa9hf-vfp-neon-toolchain-1.8.sh
</code></pre>

<p>In case of any questions just leave a comment on my Blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing STM32CubeMX on Linux]]></title>
    <link href="http://ch.ege.io/blog/2015/08/03/installing-stm32cubemx-on-linux/"/>
    <updated>2015-08-03T06:11:16+02:00</updated>
    <id>http://ch.ege.io/blog/2015/08/03/installing-stm32cubemx-on-linux</id>
    <content type="html"><![CDATA[<p>The STMicroelectronics STM32CubeMX is delivered as a exe file what implies that it is eintended to run on Windows systems only. But due to the fact it is a JAVA application we can run it on Linux as-well.</p>

<h1>Installation</h1>

<p>To install the STM32CubeMX administration rights are needed</p>

<pre><code>sudo java -jar /tmp/SetupSTM32CubeMX-4.9.0.exe
</code></pre>

<h1>Running STM32CubeMX</h1>

<p>If you&rsquo;ve selected the default install location you can run STM32CubeMX like this:</p>

<pre><code>java -jar /usr/local/STMicroelectronics/STM32Cube/STM32CubeMX/STM32CubeMX.exe
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[WIP] NIM_DVB-S/S2 V1.0 Pinout]]></title>
    <link href="http://ch.ege.io/blog/2015/07/18/nim-dvb-s-slash-s2-v1-dot-0-pinout/"/>
    <updated>2015-07-18T08:26:39+02:00</updated>
    <id>http://ch.ege.io/blog/2015/07/18/nim-dvb-s-slash-s2-v1-dot-0-pinout</id>
    <content type="html"><![CDATA[<p>This is a work in progress article and will be updated over time.</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> PIN </th>
<th style="text-align:center;"> Side B        </th>
<th style="text-align:center;"> Side A         </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">  1  </td>
<td style="text-align:center;">  GND          </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;">  2  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> GND            </td>
</tr>
<tr>
<td style="text-align:center;">  3  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;">  4  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;">  5  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;">  6  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> GND            </td>
</tr>
<tr>
<td style="text-align:center;">  7  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;">  8  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> GND            </td>
</tr>
<tr>
<td style="text-align:center;">  9  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;"> 10  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;"> 11  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> GND            </td>
</tr>
<tr>
<td style="text-align:center;"> &ndash;  </td>
<td style="text-align:center;">  Key notch    </td>
<td style="text-align:center;"> Key notch      </td>
</tr>
<tr>
<td style="text-align:center;"> 12  </td>
<td style="text-align:center;">  GND          </td>
<td style="text-align:center;"> GND            </td>
</tr>
<tr>
<td style="text-align:center;"> 13  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;"> 14  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;"> 15  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> GND            </td>
</tr>
<tr>
<td style="text-align:center;"> 16  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;"> 17  </td>
<td style="text-align:center;">  n.c.         </td>
<td style="text-align:center;"> n.c.           </td>
</tr>
<tr>
<td style="text-align:center;"> 18  </td>
<td style="text-align:center;">  GND          </td>
<td style="text-align:center;"> GND            </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PCI-Express Connectors From China]]></title>
    <link href="http://ch.ege.io/blog/2015/07/18/pci-express-connectors-from-china/"/>
    <updated>2015-07-18T07:40:11+02:00</updated>
    <id>http://ch.ege.io/blog/2015/07/18/pci-express-connectors-from-china</id>
    <content type="html"><![CDATA[<p>After my decision to build a full <a href="http://ch.ege.io/blog/2015/07/04/full-open-source-dvb-s2-board/">Open Source Software based DVB-S2 USB module</a> I ordered some PCI-Express connectors from <a href="http://s.click.aliexpress.com/e/A6qjiaIUr?af=704840420">China on Aliexpress</a>. The delivery time was quite low I received my package about 11 days after placing my order. This is really quick for standard delivery from China to Germany. Next step will be adding this connector to <a href="http://www.cadsoft.de/">Eagle PCB Design Software</a>. And designing a small breadboard to PCI-Express board and host it on <a href="https://oshpark.com/">OSHPark</a>.</p>

<p><img src="http://ch.ege.io/images/posts/IMG_5144.jpg"></p>

<p>I have not found any data sheet for this connector yet. On one side it has an engraving with <a href="http://www.te.com">,,tyco/Electronics&#8221;</a> and on the other side some code ,,08306ED&#8217;&lsquo;.</p>

<h2>Update</h2>

<p>After some research I found a ,,data sheet&#8217;&lsquo; <a href="http://www.te.com/usa-en/product-4-1775800-2.html">ENG_DS_4-1773442-7_0308-2.pdf</a> but it lacks detailed drawings about the PIN pitch. After some research I discovered that those connectors are described in the <a href="https://www.google.com/search?q=PCI+Express+Card+Electromechanical+Specification">PCI Express Card Electromechanical Specification</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Open Source DVB-S2 Board]]></title>
    <link href="http://ch.ege.io/blog/2015/07/04/full-open-source-dvb-s2-board/"/>
    <updated>2015-07-04T19:43:00+02:00</updated>
    <id>http://ch.ege.io/blog/2015/07/04/full-open-source-dvb-s2-board</id>
    <content type="html"><![CDATA[<p>Some time ago I thought it would be fun to build a USB DVB-S2 device which runs on 100% OpenSource Software. Due to the fact I do not have any tooling for soldering complex chips I decided to build this project on hardware which is already available. For interconnection of the DVB part with the PC or a Single board computer like the ODROID-C1 or Raspberry PI my decision was to use a <a href="http://www.cypress.com/?id=193">Cypress FX2 CY7C68013A</a> evaluation board. You can buy them for under 10â‚¬ in far east on ebay. I bought one of the <a href="http://sigrok.org/wiki/Lcsoft_Mini_Board">Lcsoft Mini Boards</a>. The coreboot project provides a <a href="http://www.coreboot.org/File:Fx2lp_lcsoft_schematic_A.pdf">schematic for the Lcsoft board</a>.</p>

<p><img src="http://sigrok.org/wimg/e/ec/Lcsoft-miniboard-front.png" title="'Lcsoft Mini Board CC-BY 3.0'" ></p>

<p>The <a href="http://www.cypress.com/?id=193">Cypress FX2 CY7C68013A</a> is based on a 8051 core. Not one of my favorite hacking platform but I&rsquo;ll give it a try. There is a Open Source Framework for firmware development it is called <a href="https://github.com/djmuhlestein/fx2lib">fxlib</a>. After some research on Google I found the project <a href="http://qanu.de/termini.php">Termini</a>. The firmware for the Termini hardware is available via the linuxtv.org <a href="http://linuxtv.org/cgi-bin/viewvc.cgi/dvb-hw/dvbusb-fx2/termini/">CVS repository</a>. They provide a specification for the <a href="http://qanu.de/docs/dvbt-usb-spec.pdf">USB communication</a> between the host controller and the FX2. There are already some USB 2.0 USB DVB-S2 devices based on the <a href="http://www.cypress.com/?id=193">Cypress FX2 CY7C68013A</a> like the <a href="http://www.linuxtv.org/wiki/index.php/DVBSKY_S960">DVBSKY S960</a>.</p>

<p>The last part in the jigsaw puzzle is the DVB-S2 tuner and demodulator part. Some of the linux based Set-Top-Boxes provide swappable tuner modules one of them is the manufacturer GigaBlue. They sell a <a href="http://www.gigablue.de/portfolio-item/gigablue-dvb-s2-tuner/">DVB-S2 Tuner</a> based on the Serit <a href="http://serit.hk/Products_Details.aspx?IDX=144">SP2246 NIM for DVB-S2</a>. The SP2246 is based on the <a href="http://www.st.com/web/catalog/mmc/FM131/SC1003/PF251478">STV6111</a> tuner and the <a href="http://www.st.com/web/catalog/mmc/FM131/SC628/SS1334/PF252767?s_searchtype=partnumber">STV0913</a> demodulator. It looks like the tuner module is connected via a <a href="https://en.wikipedia.org/wiki/PCI_Express#Form_factors">PCI-Express x1 36Pin</a> connector. Serit provides a very detailed <a href="http://serit.hk/Manager/Public/pdf/201212070342307ead.pdf">data sheet</a> so at least a few of the PINs should be easily mappable with a multi meter.</p>

<p><img src="http://ch.ege.io/images/posts/sp2246.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Watterott HDMI/DVI - RGB Adapter EDID Hacks]]></title>
    <link href="http://ch.ege.io/blog/2015/06/15/watterott-hdmi-slash-dvi-rgb-adapter-edid-hacks/"/>
    <updated>2015-06-15T08:09:57+02:00</updated>
    <id>http://ch.ege.io/blog/2015/06/15/watterott-hdmi-slash-dvi-rgb-adapter-edid-hacks</id>
    <content type="html"><![CDATA[<p>The German Maker supplier <a href="http://www.watterott.com">Watterott</a> sells a <a href="http://www.watterott.com/en/HDMI-RGB-adapter-with-ATmega32U4-touch-controller">HDMI/DVI to RGB Display adapter</a>. The Adapter itself contains a ATmega32U4 controller attached to USB, which works as touchcontroller.  The designs and firmware for the adapter are available on <a href="https://github.com/watterott/HDMI-Display">GitHub</a>. I am not sure if we can call this OpenSource because of a missing License file.</p>

<p><img class="center" src="https://raw.githubusercontent.com/watterott/HDMI-Display/master/hardware/HDMI-Display_v10dev.jpg"></p>

<p>Beside the HDMI/DVI Bridge controller the board contains a EEPREOM to store the <a href="https://en.wikipedia.org/wiki/Extended_Display_Identification_Data">EDID</a> data. EDID is needed to provide the attached Host device like your PC or Mac to identify what resolution and capabilities your Display has.</p>

<p>Due to the fact that the adapter supports a <a href="https://github.com/watterott/HDMI-Display/blob/master/docu/Displays.md">wide range</a> of displays the EEPROM is not programmed on a freshly ordered board.</p>

<h1>Flashing the EDID EEPROM</h1>

<p>Watterott suggests to flash the EEPROM through the ATmega32U4 controller and provides <a href="https://github.com/watterott/HDMI-Display/blob/master/docu/FAQ.md#how-to-flashupdate-the-edid-eeprom">a short description</a> how to do this. But this requires to close two solder jumpers. I decided to flash the EDID EEPROM with my <a href="http://dangerousprototypes.com/docs/Bus_Pirate">Bus Pirate</a> and the <a href="http://www.delock.de/produkte/G_65168/merkmale.html?setLanguage=en">Delock 65168</a></p>

<p><img class="center" src="http://www.bilder.delock.de/produkte/orig/50f030782950b0.34465021.jpg"></p>

<p>For me the <a href="http://www.delock.de/produkte/G_65168/merkmale.html?setLanguage=en">Delock 65168</a> is the perfect toy to play around with EDID or <a href="https://en.wikipedia.org/wiki/HDMI#CEC">HDMI CEC</a>.</p>

<p>The host controller communicates through <a href="https://en.wikipedia.org/wiki/I%C2%B2C">I2C</a> with the EDID EEPROM. There are at least 3 line needed to establish the <a href="https://en.wikipedia.org/wiki/I%C2%B2C">I2C</a> communication. You need a good ground connection <strong>(GND)</strong> and a clock line <strong>(SCL)</strong> and of course the data line <strong>(SDA)</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ODROID-C1 Enabling Bootlogo on Yocto Builds]]></title>
    <link href="http://ch.ege.io/blog/2015/05/04/odroid-c1-enabling-bootlogo-on-yocto-builds/"/>
    <updated>2015-05-04T11:40:53+02:00</updated>
    <id>http://ch.ege.io/blog/2015/05/04/odroid-c1-enabling-bootlogo-on-yocto-builds</id>
    <content type="html"><![CDATA[<p>The U-Boot for the Amlogic S805 from <a href="https://github.com/hardkernel/u-boot/tree/odroidc-v2011.03">Hardkernel</a> has the capabilities to display a bootlogo. It is not that easy to find any bootlogo that complies to a licence which can be used in comercial and in open source environments. Using the yocto logo is most probably prohibited, so I decided to design my own logo. And saved it to <strong> 24-bit Windows BMP image</strong> with the dimension of <strong>1280Ã—720</strong> as statet in the <a href="http://odroid.com/dokuwiki/doku.php?id=en:c1_tips#logo_file_format">ODROID-C1 Wiki</a></p>

<p><img src="https://raw.githubusercontent.com/linux-meson/meta-amlogic/fido/recipes-bsp/u-boot/u-boot-odroidc1/odroidc1/bootlogo.png"></p>

<h2>Modifying boot.ini</h2>

<p>In my Amlogic meta layer for the yocto build system I do not use a Fat32 boot partition so the <a href="">original bootlogo loading command</a> needed some minor modifications. The bootlogo is name bootlogo.bmp and should be copied to /boot.</p>

<pre><code># loading and displaying bootlogo
logo size ${outputmode}
video open
video clear
video dev open ${outputmode}
ext4load mmc 0:1 ${loadaddr_logo} /boot/bootlogo.bmp
bmp display ${loadaddr_logo}
bmp scale
</code></pre>

<p>You can either add this to your boot.ini or wait until I pushed a patch for <a href="https://github.com/linux-meson/meta-amlogic">meta-amlogic</a>.</p>

<h2>Modifying the U-Boot environment</h2>

<p>Another option is to change the U-Boot environment. There is already a variable called <em>preloadlogo</em>. We can update the command to load the bootlogo from ext4 instead of Fat32</p>

<pre><code>setenv preloadlogo 'logo size ${outputmode};video open;video clear;video dev open ${outputmode};ext4load mmc 0:1 ${loadaddr_logo} /boot/bootlogo.bmp;bmp display ${loadaddr_logo};bmp scale'
</code></pre>

<p>Pleas ensure, that you paste this as a single line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using H/W Randaom Generator on ODROD-C1 With Yocto]]></title>
    <link href="http://ch.ege.io/blog/2015/05/04/using-h-slash-w-randaom-generator-on-odrod-c1-with-yocto/"/>
    <updated>2015-05-04T05:30:18+02:00</updated>
    <id>http://ch.ege.io/blog/2015/05/04/using-h-slash-w-randaom-generator-on-odrod-c1-with-yocto</id>
    <content type="html"><![CDATA[<p>The Amlogic S805 CPU used in the ODROID-C1 contains a hardware random number generator which can be used to increase entropy in the linux kernel. The guys at Hardkernel wrote a <a href="http://odroid.com/dokuwiki/doku.php?id=en:c1_hardware_number_generator">tutorial how to enable this in Ubuntu</a>.</p>

<p>Due to the fact that there is a <a href="http://cgit.openembedded.org/meta-openembedded/tree/meta-oe/recipes-support/rng-tools/rng-tools_4.bb?h=fido">rng-tools recipe</a> in the <a href="http://cgit.openembedded.org/meta-openembedded/">meta-openembedded</a> repo I thought it would be a no-brainer to get this working in Yocto fido.</p>

<p>Before you can build the rng-tools you need the <a href="http://cgit.openembedded.org/meta-openembedded/">meta-openembedded</a> meta-oe layer in your bblayer configuration file this may look like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/conf/bblayers.conf b/conf/bblayers.conf</span>
</span><span class='line'><span class="gh">index d999c9d..fcf7bf2 100644</span>
</span><span class='line'><span class="gd">--- a/conf/bblayers.conf</span>
</span><span class='line'><span class="gi">+++ b/conf/bblayers.conf</span>
</span><span class='line'><span class="gu">@@ -9,8 +9,12 @@ BBLAYERS ?= &quot; \</span>
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta \
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta-yocto \
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta-yocto-bsp \
</span><span class='line'><span class="gi">+  /build/hardkernel/odroid-c1/meta-amlogic \</span>
</span><span class='line'><span class="gi">+  /build/hardkernel/odroid-c1/meta-openembedded/meta-oe \</span>
</span><span class='line'>   &quot;
</span></code></pre></td></tr></table></div></figure>


<p>After adding the meta-oe layer and preparing the bitbake environment we can build the rng-tools recipe</p>

<pre><code>$ source poky/oe-init-build-env build/
$ bitbake rng-tools
</code></pre>

<p>The resulting file can be transfered to the target and installed with the defined package manger. In my case I do use opkg. Please ensure you are using a image with a package manager enabled. I do use core-image-base and add the following to conf/local.conf:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/conf/local.conf b/conf/local.conf</span>
</span><span class='line'><span class="gh">index a1d99f9..3e200c9 100644</span>
</span><span class='line'><span class="gd">--- a/conf/local.conf</span>
</span><span class='line'><span class="gi">+++ b/conf/local.conf</span>
</span><span class='line'><span class="gu">@@ -104,13 +119,13 @@ DISTRO ?= &quot;poky&quot;</span>
</span><span class='line'> #  - &#39;package_rpm&#39; for rpm style packages
</span><span class='line'> # E.g.: PACKAGE_CLASSES ?= &quot;package_rpm package_deb package_ipk&quot;
</span><span class='line'> # We default to rpm:
</span><span class='line'><span class="gd">-PACKAGE_CLASSES ?= &quot;package_rpm&quot;</span>
</span><span class='line'><span class="gi">+PACKAGE_CLASSES ?= &quot;package_ipk&quot;</span>
</span><span class='line'><span class="gu">@@ -137,13 +152,13 @@ PACKAGE_CLASSES ?= &quot;package_rpm&quot;</span>
</span><span class='line'> # There are other application targets that can be used here too, see
</span><span class='line'> # meta/classes/image.bbclass and meta/classes/core-image.bbclass for more details.
</span><span class='line'> # We default to enabling the debugging tweaks.
</span><span class='line'><span class="gd">-EXTRA_IMAGE_FEATURES = &quot;debug-tweaks&quot;</span>
</span><span class='line'><span class="gi">+EXTRA_IMAGE_FEATURES = &quot;debug-tweaks package-management ssh-server-dropbear&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s transfer the resulting files to the target.</p>

<pre><code>$ find tmp/deploy/ipk/ -name "rng-tools*"
$ scp tmp/deploy/ipk/cortexa5hf-vfp-neon/rng-tools_4-r0_cortexa5hf-vfp-neon.ipk root@odroidc1:/tmp
</code></pre>

<p><strong>Attention</strong>: At the moment the recipe for the rng-tools packages installs it&rsquo;s configuration to <em>/etc/rng-tools</em> but the initscript expects it at <em>/etc/default/rng-tools</em>. I send a <a href="http://article.gmane.org/gmane.comp.handhelds.openembedded/68813">patch</a> to the meta-openembedded mailinglist to correct this. The current behaviour of the rng-tools should be pretty okay due to the fact that given no &ldquo;-r&rdquo; option the default behavior is to use /dev/hwrng.</p>

<h2>Benchmarks</h2>

<p>The rng-tools provide some statistical tests for checking if the hardware random generator works as expected.</p>

<h3>Without rngd</h3>

<p>This runs the <a href="http://en.wikipedia.org/wiki/FIPS_140-2">FIPS 140-2 tests</a> against the device <em>/dev/random</em> <strong>without</strong> running rngd</p>

<pre><code>root@odroidc1:~# time rngtest -c1 &lt; /dev/random
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 20032
rngtest: FIPS 140-2 successes: 1
rngtest: FIPS 140-2 failures: 0
rngtest: FIPS 140-2(2001-10-10) Monobit: 0
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=132.975; avg=132.975; max=132.975)bits/s
rngtest: FIPS tests speed: (min=55.934; avg=55.934; max=55.934)Mibits/s
rngtest: Program run time: 150404986 microseconds
real    2m 30.40s
user    0m 0.00s
sys     0m 0.01s
</code></pre>

<p>The average of <strong>132.975 bits/s</strong> throughput is pretty low.</p>

<h3>With rngd</h3>

<p>This runs the <a href="http://en.wikipedia.org/wiki/FIPS_140-2">FIPS 140-2 tests</a> against the device <em>/dev/random</em> <strong>with</strong> running rngd</p>

<pre><code>root@odroidc1:~# /etc/init.d/rng-tools start
root@odroidc1:~# time rngtest -c1 &lt; /dev/random
root@odroidc1:~# time rngtest -c100 &lt; /dev/random
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 2000032
rngtest: FIPS 140-2 successes: 99
rngtest: FIPS 140-2 failures: 1
rngtest: FIPS 140-2(2001-10-10) Monobit: 1
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=5.034; avg=5.310; max=5.374)Mibits/s
rngtest: FIPS tests speed: (min=53.880; avg=58.279; max=58.688)Mibits/s
rngtest: Program run time: 392465 microseconds
Command exited with non-zero status 1
real    0m 0.39s
user    0m 0.03s
sys     0m 0.36s
</code></pre>

<p>Now we have an average throughput of <strong>5.310 Mibits/s</strong> compared to the <strong>132.975 bits/s</strong> without rngd.</p>

<h2>Considerations</h2>

<p>You might keep in mind that using a hardware random generator may cause security issues. To have a more detailed view on this read this posting and comments on <a href="https://plus.google.com/+TheodoreTso/posts/SDcoemc9V3J">Theodore Ts&#8217;o posting on G+</a>. From this posting <em>If I were the NSA, and I wanted to gimmick an RNG, whether it be the one inside the Intel chip or the Android build, it would be a counter encrypted by an AES key known by the NSA.  (Why AES?   Because RDRAND is documented as using AES in its final whitening stage; so someone taking a quick look at the RDRAND implementation would be expecting AES).</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the SEGGER J-Link to Access the TI CC2650 Chip]]></title>
    <link href="http://ch.ege.io/blog/2015/04/12/using-the-segger-j-link-to-access-the-ti-cc2650-chip/"/>
    <updated>2015-04-12T17:07:32+02:00</updated>
    <id>http://ch.ege.io/blog/2015/04/12/using-the-segger-j-link-to-access-the-ti-cc2650-chip</id>
    <content type="html"><![CDATA[<p>Before you get started install the <a href="https://www.segger.com/jlink-software.html">newest host tools</a> for your SEGGER in my case I installed the Debian package of version <strong>V4.98b</strong>. On first start the <strong>JLinExe</strong> installs the apropriate Firmware.</p>

<pre><code>$ JLinkExe -if jtag -device CC2650F128
SEGGER J-Link Commander V4.98b ('?' for help)
Compiled Apr 10 2015 20:27:38
Updating firmware:  J-Link V9 compiled Apr 10 2015 10:51:08
Replacing firmware: J-Link V9 compiled Feb 13 2015 20:37:28
Waiting for new firmware to boot
New firmware booted successfully
</code></pre>

<p>On the <a href="http://www.ti.com/tool/cc2650stk">SimpleLinkâ„¢ Bluetooth SmartÂ®/Multi-Standard SensorTag</a> they use the <a href="http://www.ti.com/product/cc2650">CC2650</a> with 128kB of Flash ROM. So you have to select <em>-device CC2650F128</em> when running <strong>JLinkExe</strong> At the moment it seems the <a href="http://www.ti.com/product/cc2650">CC2650</a> only supports JTAG debugging and not the more common SWI debug like STM32 do use. Anyway The Segger can run both modes.</p>

<p>After a succesful firmawre update the communication looks like this</p>

<pre><code>SEGGER J-Link Commander V4.98b ('?' for help)
Compiled Apr 10 2015 20:27:38
Info: Device "CC2650F128" selected.
DLL version V4.98b, compiled Apr 10 2015 20:27:35
Firmware: J-Link V9 compiled Apr 10 2015 10:51:08
Hardware: V9.30
S/N: XXXXXXXX
OEM: SEGGER-EDU
Feature(s): FlashBP, GDB
VTarget = 2.800V
Info: TotalIRLen = 10, IRPrint = 0x0011
Info: Found Cortex-M3 r2p1, Little endian.
Info: FPUnit: 6 code (BP) slots and 2 literal slots
Info: CoreSight components:
Info: ROMTbl 0 @ E00FF000
Info: ROMTbl 0 [0]: FFF0F000, CID: B105E00D, PID: 000BB000 SCS
Info: ROMTbl 0 [1]: FFF02000, CID: B105E00D, PID: 003BB002 DWT
Info: ROMTbl 0 [2]: FFF03000, CID: B105E00D, PID: 002BB003 FPB
Info: ROMTbl 0 [3]: FFF01000, CID: B105E00D, PID: 003BB001 ITM
Info: ROMTbl 0 [4]: FFF41000, CID: B105900D, PID: 003BB923 TPIU-Lite
Found 2 JTAG devices, Total IRLen = 10:
 #0 Id: 0x4BA00477, IRLen: 04, IRPrint: 0x1, CoreSight JTAG-DP (ARM)
 #1 Id: 0x8B99A02F, IRLen: 06, IRPrint: 0x1, TI ICEPick
Cortex-M3 identified.
Target interface speed: 100 kHz
J-Link&gt;
</code></pre>

<p>The next step is to create a firmware backup of the original firmware. This is needed because this little beast at the momemnt denies to build its firmware under Linux. The CodeComposerStudio Projekt is using some Windows Tools to build and expects a specific directory layout.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ORICO BTA-402 USB Bluetooth 4.0 Low Energy Micro Adapter on ODROID-C1]]></title>
    <link href="http://ch.ege.io/blog/2015/04/12/orico-bta-402-usb-bluetooth-4-dot-0-low-energy-micro-adapter-on-odroid-c1/"/>
    <updated>2015-04-12T09:11:53+02:00</updated>
    <id>http://ch.ege.io/blog/2015/04/12/orico-bta-402-usb-bluetooth-4-dot-0-low-energy-micro-adapter-on-odroid-c1</id>
    <content type="html"><![CDATA[<p>Today I had some fun with <a href="http://en.wikipedia.org/wiki/Bluetooth_low_energy">Bluetooth Low Energy</a> and my <a href="http://www.hardkernel.com/main/products/prdt_info.php">ODROID C1</a> In an earlier <a href="http://ch.ege.io/blog/2015/04/12/running-bluez5-on-yocto-slash-openembedded/">Blog Post</a> I described how to enable Bluetooth Low Energy Support in Yocto.</p>

<p>Recently I bought this <a href="http://www.amazon.de/gp/product/B00K5TJP02?psc=1&amp;redirect=true&amp;ref_=oh_aui_detailpage_o04_s00">ORICO BTA-402 USB Bluetooth 4.0 Low Energy Micro Adapter</a> on Amazon to play with Bluetooth Low Energy. The USB Dongle was automatically detected by my <a href="https://github.com/project-magpie/meta-amlogic">meta-amlogic&rsquo;s</a> kernel configuration for the <a href="http://www.hardkernel.com/main/products/prdt_info.php">ODROID C1</a></p>

<p>I used the New <a href="http://www.ti.com/tool/cc2650stk">SimpleLinkâ„¢ Bluetooth SmartÂ®/Multi-Standard SensorTag</a> as the device to connect to.</p>

<p><img src="http://ch.ege.io/images/SensorTag2.png"></p>

<p>On the ODROID-C1 device run the following commands:</p>

<pre><code>root@odroidc1:~# hciconfig
hci0:   Type: BR/EDR  Bus: USB
    BD Address: 00:1A:7D:DA:71:09  ACL MTU: 310:10  SCO MTU: 64:8
    DOWN
    RX bytes:547 acl:0 sco:0 events:27 errors:0
    TX bytes:384 acl:0 sco:0 commands:27 errors:0
</code></pre>

<p>Check if your adapter is DOWN as you can see in the example above. If the adapter is down you have to bring it up befare any other action can take place</p>

<pre><code>hciconfig device up
</code></pre>

<p>After this you can re-check if your adapter is UP and RUNNING</p>

<pre><code>root@odroidc1:~# hciconfig
hci0:   Type: BR/EDR  Bus: USB
        BD Address: 00:1A:7D:DA:71:09  ACL MTU: 310:10  SCO MTU: 64:8
        UP RUNNING
        RX bytes:10116 acl:72 sco:0 events:364 errors:0
        TX bytes:1858 acl:73 sco:0 commands:66 errors:0
</code></pre>

<p>Now you can scan for Bluetooth Low Energy devices Please ensure that your SensorTag is in Advertise Mode. Whith the default Firmware this can be achieved by pressing the Power Button.</p>

<pre><code>root@odroidc1:~# hcitool lescan
LE Scan ...
50:C4:7F:6C:18:2C (unknown)
50:C4:7F:6C:18:2C (unknown)
50:C4:7F:6C:18:2C (unknown)
50:C4:7F:6C:18:2C (unknown)
50:C4:7F:6C:18:2C (unknown)
68:C9:0B:06:EF:0B (unknown)
68:C9:0B:06:EF:0B CC2650 SensorTag
68:C9:0B:06:EF:0B (unknown)
68:C9:0B:06:EF:0B CC2650 SensorTag
68:C9:0B:06:EF:0B (unknown)
68:C9:0B:06:EF:0B CC2650 SensorTag
68:C9:0B:06:EF:0B (unknown)
68:C9:0B:06:EF:0B CC2650 SensorTag
50:C4:7F:6C:18:2C (unknown)
</code></pre>

<p>After a successful scan we can query some information from the SensorTag</p>

<pre><code>root@odroidc1:~# hcitool leinfo 68:C9:0B:06:EF:0B
Requesting information ...
        Handle: 71 (0x0047)
        LMP Version: 4.1 (0x7) LMP Subversion: 0x200
        Manufacturer: Texas Instruments Inc. (13)
        Features: 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00
</code></pre>

<p>Now lets connect to the SensorTag</p>

<pre><code>root@odroidc1:~# hcitool lecc 68:C9:0B:06:EF:0B
Connection handle 71
</code></pre>

<p>After this we can use the gatttool from the BlueZ5 package to connect to the GATT Server on the SensorTag</p>

<pre><code>root@odroidc1:~# gatttool -b 68:C9:0B:06:EF:0B --interactive
[68:C9:0B:06:EF:0B][LE]&gt;
</code></pre>

<p>Establish a connection to the GATT Server</p>

<pre><code> [68:C9:0B:06:EF:0B][LE]&gt; connect
 Attempting to connect to 68:C9:0B:06:EF:0B
 Connection successful
</code></pre>

<p>Scan for Primary UUIDs</p>

<pre><code>[68:C9:0B:06:EF:0B][LE]&gt; primary
attr handle: 0x0001, end grp handle: 0x0007 uuid: 00001800-0000-1000-8000-00805f9b34fb
attr handle: 0x0008, end grp handle: 0x000b uuid: 00001801-0000-1000-8000-00805f9b34fb
attr handle: 0x000c, end grp handle: 0x001e uuid: 0000180a-0000-1000-8000-00805f9b34fb
attr handle: 0x001f, end grp handle: 0x0026 uuid: f000aa00-0451-4000-b000-000000000000
attr handle: 0x0027, end grp handle: 0x002e uuid: f000aa20-0451-4000-b000-000000000000
attr handle: 0x002f, end grp handle: 0x0036 uuid: f000aa40-0451-4000-b000-000000000000
attr handle: 0x0037, end grp handle: 0x003e uuid: f000aa80-0451-4000-b000-000000000000
attr handle: 0x003f, end grp handle: 0x0046 uuid: f000aa70-0451-4000-b000-000000000000
attr handle: 0x0047, end grp handle: 0x004b uuid: 0000ffe0-0000-1000-8000-00805f9b34fb
attr handle: 0x004c, end grp handle: 0x0050 uuid: f000aa64-0451-4000-b000-000000000000
attr handle: 0x0051, end grp handle: 0x0058 uuid: f000ac00-0451-4000-b000-000000000000
attr handle: 0x0059, end grp handle: 0x0060 uuid: f000ccc0-0451-4000-b000-000000000000
attr handle: 0x0061, end grp handle: 0xffff uuid: f000ffc0-0451-4000-b000-000000000000
</code></pre>

<p>To receive notifications on Key Press Events send the following to the device</p>

<pre><code>[68:C9:0B:06:EF:0B][LE]&gt; char-write-req 4a 0100
Notification handle = 0x0049 value: 01
Notification handle = 0x0049 value: 00
Notification handle = 0x0049 value: 01
Notification handle = 0x0049 value: 00
Notification handle = 0x0049 value: 01
Notification handle = 0x0049 value: 00
Notification handle = 0x0049 value: 01
Notification handle = 0x0049 value: 00
</code></pre>

<p>Now each key press and release should be displayed in the gatttool. Frankly this key press event notification is just copy past from this <a href="https://vine.co/v/OVbOXVwBeYu">vine</a> posting.</p>

<iframe src="https://vine.co/v/OVbOXVwBeYu/embed/simple" width="600" height="600" frameborder="0"></iframe>


<script src="https://platform.vine.co/static/scripts/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running BlueZ5 on Yocto/OpenEmbedded]]></title>
    <link href="http://ch.ege.io/blog/2015/04/12/running-bluez5-on-yocto-slash-openembedded/"/>
    <updated>2015-04-12T07:09:49+02:00</updated>
    <id>http://ch.ege.io/blog/2015/04/12/running-bluez5-on-yocto-slash-openembedded</id>
    <content type="html"><![CDATA[<p>At the moment yocto/openembedded ships with <a href="http://www.bluez.org">BlueZ4</a> as the Linux Bluetooth protocol stack. Due to the fact that <a href="http://en.wikipedia.org/wiki/Bluetooth_low_energy">Bluetooth low energy</a> is only supported in BlueZ5 this is a bit of a disappointment. There is a long-standing bug report on this <a href="https://bugzilla.yoctoproject.org/show_bug.cgi?id=5031">#5031 </a>. But since the commit <a href="http://git.yoctoproject.org/cgit/cgit.cgi/poky/commit/?id=1139cc4eef305fc14bc5db19a5f8729e7b3bf27a">1139cc4e&hellip;</a> the used BlueZ version can be selected. According to the reference manual BlueZ5 can be enabled by adding bluez5 to the <a href="http://www.yoctoproject.org/docs/1.8/ref-manual/ref-manual.html#var-DISTRO_FEATURES">DISTRO_FEATURES</a> for me the easiest way to to this was adding the following line to my conf/local.conf in the <a href="http://www.yoctoproject.org/docs/1.8/dev-manual/dev-manual.html#build-directory">Build Directory</a>.</p>

<pre><code>DISTRO_FEATURES = "ext2 alsa wifi usbhost bluetooth bluez5 ${DISTRO_FEATURES_LIBC}"
</code></pre>

<p>This disables x11 for example. But you may also could add something like this:</p>

<pre><code>DISTRO_FEATURES_append = "bluez5"
</code></pre>

<p>After this run an build of your preferred image. In my case this was &ldquo;core-image-base&rdquo;</p>

<pre><code>bitbake core-image-base
</code></pre>

<p>To have full bluetooth support on the target I needed to install some extra packages. To get a list of all bluetooth related packages run the following command. For this you need a <a href="http://www.yoctoproject.org/docs/1.8/ref-manual/ref-manual.html#package-feeds-dev-environment">opkg/ipkg feed</a> server.</p>

<pre><code>root@odroidc1:~# opkg list | grep blue
bluez5 - 5.29-r0 - Linux Bluetooth Stack Userland V5  Linux Bluetooth stack V5 userland
bluez5-dbg - 5.29-r0 - Linux Bluetooth Stack Userland V5 - Debugging files  Linux Bluetooth
bluez5-dev - 5.29-r0 - Linux Bluetooth Stack Userland V5 - Development files  Linux Bluetooth
bluez5-doc - 5.29-r0 - Linux Bluetooth Stack Userland V5 - Documentation files  Linux Bluetooth
bluez5-noinst-tools - 5.29-r0 - Linux Bluetooth Stack Userland V5  Linux Bluetooth stack V5 userland
bluez5-obex - 5.29-r0 - Linux Bluetooth Stack Userland V5  Linux Bluetooth stack V5 userland
bluez5-testtools - 5.29-r0 - Linux Bluetooth Stack Userland V5  Linux Bluetooth stack V5 userland
libasound-module-bluez - 5.29-r0 - Linux Bluetooth Stack Userland V5  Linux Bluetooth stack V5 userland
packagegroup-base-bluetooth - 1.0-r83 - Bluetooth support  Merge machine and distro options to create a basic
</code></pre>

<p>I installed the following packages:</p>

<pre><code>bluez5-testtools, bluez5-noinst-tools
</code></pre>

<p>The later <strong>bluez5-noinst-tools</strong> was required for the gatttool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog Based on Octopress]]></title>
    <link href="http://ch.ege.io/blog/2014/10/25/new-blog-based-on-octopress/"/>
    <updated>2014-10-25T13:40:01+02:00</updated>
    <id>http://ch.ege.io/blog/2014/10/25/new-blog-based-on-octopress</id>
    <content type="html"><![CDATA[<p>This is my new Blog based on <a href="http://octopress.org/">Octopress</a> and <a href="http://kaworu.github.io/octostrap3">Octostrap3</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Yocto Image for the A20 OLinuXino LIME]]></title>
    <link href="http://ch.ege.io/blog/2014/09/26/building-a-yocto-image-for-the-a20-olinuxino-lime/"/>
    <updated>2014-09-26T00:00:00+02:00</updated>
    <id>http://ch.ege.io/blog/2014/09/26/building-a-yocto-image-for-the-a20-olinuxino-lime</id>
    <content type="html"><![CDATA[<p>Some time ago I ordered a <a href="https://www.olimex.com/Products/OLinuXino/A20/A20-OLinuXino-LIME-4GB/open-source-hardware">A20-OLinuXino-LIME-4GB</a> board. This was planed as a replacement for my not so beloved Raspberry PI. I am not that big fan of the PI because of the wacky SD-Card holder and the USB stability. I hope the 4GB NAND of the <a href="https://www.olimex.com/Products/OLinuXino/A20/A20-OLinuXino-LIME-4GB/open-source-hardware">A20-OLinuXino-LIME-4GB</a> Will improve the stability of my target application.</p>

<h3>[Update - 2014-10-01]</h3>

<p>I&rsquo;ve created a successful <a href="https://github.com/linux-sunxi/meta-sunxi/commit/998cbf354423375ceacf735571dab150b9670502">pull-request</a> to merge my changes into the <a href="https://github.com/linux-sunxi/meta-sunxi">meta-sunxi</a> repository and succeeded with the current master branch. Maybe I also start a pull request for the daisy branch. Due  to the fact that the new yocto release is knocking on the door This is may not needed.</p>

<p>As a big fan of the <a href="https://www.yoctoproject.org/">Yocto Project</a> I decided to run poky on my OLinuXino. Due to the fact that the <a href="https://www.olimex.com/Products/OLinuXino/A20/A20-OLinuXino-LIME-4GB/open-source-hardware">A20-OLinuXino-LIME-4GB</a> is not yet officially supported by the <a href="https://github.com/linux-sunxi/meta-sunxi">meta-sunxi layer</a> there are some patches needed. Those patches are located in <a href="https://github.com/cybertux/meta-sunxi/tree/olimex-a20-lime">my fork</a>. The patch set is against the daisy branch</p>

<h1>Preparation</h1>

<p>Clone the git repositories and switch to the daisy branch.</p>

<pre><code>mkdir /data/src/yocto
cd /data/src/yocto
git clone git://git.yoctoproject.org/poky
git clone https://github.com/cybertux/meta-sunxi.git
cd poky
git checkout -b daisy origin/daisy
cd ../meta-sunxi
git checkout -b daisy origin/olimex-a20-lime
</code></pre>

<p>Prepare a warm and cozy environment for the build</p>

<pre><code>cd /data/src/yocto/poky
mkdir -p ../build/a20-lime
source oe-init-build-env ../build/a20-lime
</code></pre>

<p>Add the <a href="https://github.com/linux-sunxi/meta-sunxi">sunxi meta-layer</a> to the build environment</p>

<pre><code>--- a/conf/bblayers.conf
+++ b/conf/bblayers.conf
@@ -9,6 +9,7 @@ BBLAYERS ?= " \
   /data/src/yocto/poky/meta \
   /data/src/yocto/poky/meta-yocto \
   /data/src/yocto/poky/meta-yocto-bsp \
+  /data/src/yocto/meta-sunxi \
   "
 BBLAYERS_NON_REMOVABLE ?= " \
   /data/src/yocto/poky/meta \
</code></pre>

<p>Set the correct target machine and tuning parameters</p>

<pre><code>diff --git a/conf/local.conf b/conf/local.conf
index bcb0864..6a793e6 100644
--- a/conf/local.conf
+++ b/conf/local.conf
@@ -55,7 +55,7 @@ PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"
 #MACHINE ?= "edgerouter"
 #
 # This sets the default machine to be qemux86 if no other machine is selected:
-MACHINE ??= "qemux86"
+MACHINE ??= "olinuxino-a20-lime"

 #
 # Where to place downloads
@@ -125,7 +125,7 @@ DISTRO ?= "poky"
 #  - 'package_rpm' for rpm style packages
 # E.g.: PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"
 # We default to rpm:
-PACKAGE_CLASSES ?= "package_rpm"
+PACKAGE_CLASSES ?= "package_ipk"

 #
 # SDK/ADT target architecture
@@ -134,7 +134,19 @@ PACKAGE_CLASSES ?= "package_rpm"
 # you can build the SDK packages for architectures other than the machine you are
 # running the build on (i.e. building i686 packages on an x86_64 host).
 # Supported values are i686 and x86_64
-#SDKMACHINE ?= "i686"
+SDKMACHINE ?= "i686"
+
+#
+# The default machine settings are meant to be the lowest common denominator,
+# maximizing generality. Significantly better performance (2x-3x) can be achieved
+# with the following settings:
+#
+# Allwinner A20
+#
+# For Allwinner A20 (Cubieboard2/CubieTruck), the following tuning options are recommended:
+#
+# Enable hardfloat, thumb2 and neon capabilities
+DEFAULTTUNE = "cortexa7hf-neon-vfpv4"

 #
 # Extra image configuration defaults
</code></pre>

<h1>Building the image</h1>

<p>Now the image can be build, lean back and grap some coffee, beer, &hellip;</p>

<pre><code>bitbake core-image-base

[...]
Build Configuration:
BB_VERSION        = "1.22.0"
BUILD_SYS         = "x86_64-linux"
NATIVELSBSTRING   = "Ubuntu-12.04"
TARGET_SYS        = "arm-poky-linux-gnueabi"
MACHINE           = "olinuxino-a20-lime"
DISTRO            = "poky"
DISTRO_VERSION    = "1.6.1"
TUNE_FEATURES     = "armv7a vfp neon callconvention-hard vfpv4 cortexa7"
TARGET_FPU        = "vfp-vfpv4-neon"
meta
meta-yocto
meta-yocto-bsp    = "daisy:a4d8015687cf9ddd6ef563e29cf840698f81c099"
meta-sunxi        = "olimex-a20-lime:5bb9da72c24a442eecd827a9b85f903281357815"
[...]
</code></pre>

<p>After a successful build all images are located in the folder</p>

<pre><code>/data/src/yocto/build/a20-lime/tmp/deploy/images/olinuxino-a20-lime/
</code></pre>

<h1>Building the SDK</h1>

<p>Sometimes it is handy to have a toolchain apart from the whole yocto/poky environment. So lets build some</p>

<pre><code>bitbake -cpopulate_sdk core-image-base
</code></pre>

<p>This will take mostly as long as the image build so again grab some coffee, beer or &hellip;..
The result is located here:</p>

<pre><code>/data/src/yocto/build/a20-lime/tmp/deploy/sdk/olinuxino-a20-lime/poky-eglibc-i686-core-image-base-cortexa7hf-vfp-vfpv4-neon-toolchain-1.6.1.sh
</code></pre>

<h1>Installation of the Toolchain</h1>

<p>You may need root access to install in /opt</p>

<pre><code>sudo  tmp/deploy/sdk/poky-eglibc-i686-core-image-base-cortexa7hf-vfp-vfpv4-neon-toolchain-1.6.1.sh
Enter target directory for SDK (default: /opt/poky/1.6.1):
You are about to install the SDK to "/opt/poky/1.6.1". Proceed[Y/n]?y
Extracting SDK...
Setting it up...done
SDK has been successfully set up and is ready to be used.
</code></pre>

<h1>Using the SDK</h1>

<p>To use the SDK we have to source the set-up script</p>

<pre><code>source  /opt/poky/1.6.1/environment-setup-cortexa7hf-vfp-vfpv4-neon-poky-linux-gnueabi
</code></pre>

<p>After this some variables should be set like this</p>

<pre><code>echo $CC
arm-poky-linux-gnueabi-gcc -march=armv7-a -mthumb-interwork -mfloat-abi=hard -mfpu=neon-vfpv4 -mtune=cortex-a7 --sysroot=/opt/poky/1.6.1/sysroots/cortexa7hf-vfp-vfpv4-neon-poky-linux-gnueabi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sti7111 (ST40) JTAG Preparations]]></title>
    <link href="http://ch.ege.io/blog/2014/06/15/sti7111-st40-jtag-preparations/"/>
    <updated>2014-06-15T00:00:00+02:00</updated>
    <id>http://ch.ege.io/blog/2014/06/15/sti7111-st40-jtag-preparations</id>
    <content type="html"><![CDATA[<p>While I almost smashed my Spark 7111 Box during <a href="http://project-magpie.github.io/2013/10/02/that-was-a-close-shave/">UBI experiments</a> I decided to build a JTAG adapter for the ST40 CPU. After getting a little more familiar with eagle my second design ended in the <a href="https://github.com/project-magpie/jtag-adapter">ST40 JTAG adapter</a>.</p>

<p>I ordered the PCB at <a href="http://www.seeedstudio.com/service/">Seeedstudio Fusion PCB</a> and was impressed how cheap and fast they are.</p>

<p><img src="http://ch.ege.io/images/jtag/jtag_pcb.png"></p>

<p>After assembly of the PCB the JTAG adapter have to be connected to the STB. If you are unsure about the pinning you can easily check if Pin-2 is connected to GND with a multimeter.</p>

<p><img src="http://ch.ege.io/images/jtag/spark_jtag_pinout.png"></p>

<p>A more detailed version reconstructed in eagle.</p>

<p><img src="http://ch.ege.io/images/jtag/spark_jtag_pinout_eagle.png"></p>

<p>Anyway, most hardware is useless without software. To use the JTAG Adapter the <a href="http://www.st.com/st-web-ui/static/active/en/resource/technical/document/user_manual/CD17379953.pdf">ST40 Micro Toolset</a> is needed. You can grab your version of the ST40 Micro Toolset at the <a href="ftp://ftp.stlinux.com/pub/tools/products/st40tools/ST40_GNU_R5.1.0/">STM ftp server</a>. As usual I decided to take the linux version (R5.1.0). I have tested with Ubuntu 12.04. Maybe the 32bit compatibility libs have to be installed if you are running a 64bit distro. You also need the <a href="ftp://ftp.stlinux.com/pub/tools/products/stmc2/R1.6.0/doc/release_notes.htm">ST Micro Connection Package R1.6.0.</a>. After Installation the folder structure should look like this:</p>

<pre><code>$ tree -L 1 /opt/STM/
/opt/STM/
â”œâ”€â”€ ST40R5.1.0
â””â”€â”€ STMCR1.6.0
</code></pre>

<p>To be able to execute the binaries some modifications to the PATH and LD_LIBRARY_PATH variable have to be made.</p>

<pre><code>export LD_LIBRARY_PATH=/opt/STM/STMCR1.6.0/lib:/opt/STM/ST40R5.1.0/lib
export PATH=/opt/STM/ST40R5.1.0/bin:/opt/STM/STMCR1.6.0/bin:$PATH
</code></pre>

<p>Now you sould be able to execute the following command</p>

<pre><code>$ sh4xrun
usage: /opt/STM/ST40R5.1.0/bin/sh4xrun [-c command] [-d directory] [-e filename] [-f] [-g gdbpath] [-h] [-i filename] [-t     target] [-u gdbname] [-v] [-x filename] [-A command] [-B command] [-C option] [-D] [-T timeout] [-V] [-a|--] [arguments]
  -a arguments  target program arguments
  -c command    connection command (default is sh4tp)
  -d directory  directory in which to search for command files
  -e filename   executable file to load
  -f            (ignored)
  -g gdbpath    specify path to GDB
  -h            display help
  -i filename   command script file to source
  -t target     target specification
  -u gdbname    specify name of GDB
  -v            verbose
  -x filename   use filename instead of .shgdbinit
  -A command    execute command after running program
  -B command    execute command before running program
  -C option     connection command option
  -D            debug (very verbose)
  -T timeout    maximum time for executing on target
  -V            version string
</code></pre>

<p>With this command a executable can be uploaded and executed right on the box. But what kind of executable is worthwhile to be uploaded? On Avi+ Forum they use a tool called flasher which is upload to the box. I prefer to use a self compiled version of u-boot. And honestly I did not managed to compile a flasher for the sti7111.</p>

<h2>Compilation of U-Boot</h2>

<p>Before we can compile the u-boot boot loader we have to get the source</p>

<pre><code>$ git clone git://git.stlinux.com/stm/u-boot.git
$ cd u-boot/
$ git checkout -b stmicro-1.3.1 origin/stmicro-1.3.1
</code></pre>

<p>I decided to use stmicro-1.3.1 branch It sounds familiar and I was unable to build the stmicro branch. To compile the source I used a toolchain I&rsquo;ve created with to meta-stlinux layer and yocto.</p>

<pre><code>$ source /opt/poky/1.5.1/environment-setup-sh4-poky-linux
$ export CROSS_COMPILE=sh4-poky-linux-
$ unset LDFLAGS
$ make hdk7111_config
$ vim ./cpu/sh/config.mk
# remove option  -m4-nofpu
</code></pre>

<p>After a successful compilation you have a file called u-boot. This can be uploaded by executing:</p>

<pre><code>sh4xrun -c sh4tp -t STMCLT1000_A:sat7111:st40,debug=2 -e /data/src/u-boot/u-boot
</code></pre>

<p>On a working serial console connected to the STB you should see something like this:</p>

<pre><code>Board: STx7111-HDK  [29-bit mode]


U-Boot 1.3.1-dirty (Jun 15 2014 - 18:23:57) - stm23-2011-12-08

DRAM:  256 MiB
NOR:     8 MiB
NAND:  Bad block table found at page 262080, version 0x01
Bad block table found at page 262016, version 0x01
nand_read_bbt: Bad block at 0x04400000
nand_read_bbt: Bad block at 0x06580000
nand_read_bbt: Bad block at 0x065a0000
nand_read_bbt: Bad block at 0x0e580000
nand_read_bbt: Bad block at 0x0e5a0000
nand_read_bbt: Bad block at 0x10c00000
nand_read_bbt: Bad block at 0x10c20000
nand_read_bbt: Bad block at 0x16580000
nand_read_bbt: Bad block at 0x165a0000
nand_read_bbt: Bad block at 0x18c00000
nand_read_bbt: Bad block at 0x18c20000
nand_read_bbt: Bad block at 0x1dc40000
nand_read_bbt: Bad block at 0x1dc60000
nand_read_bbt: Bad block at 0x1e580000
nand_read_bbt: Bad block at 0x1e5a0000
512 MiB
SPI:  ERROR: Unknown SPI Device detected, status = 0xff
*** Warning - bad CRC, using default environment

In:    serial
Out:   serial
Err:   serial
</code></pre>

<p>It looks like the SPI NOR Flash is not supported by this version of u-boot. So work is to do&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EDID Mission Accomplished]]></title>
    <link href="http://ch.ege.io/blog/2014/04/29/edid-mission-accomplished/"/>
    <updated>2014-04-29T00:00:00+02:00</updated>
    <id>http://ch.ege.io/blog/2014/04/29/edid-mission-accomplished</id>
    <content type="html"><![CDATA[<p>After my <a href="http://project-magpie.github.io/2014/04/26/pursue-hdmi-edid-bugs/">HDMI EDID analisys</a> I decided getting more in touch with the hardware. I tried to trace the loose ends and checked where the onboard EEPROM is located. The next step was disabling the EEPROM and connecting the STB I2C Bus to the HDMI side.As in my previous <a href="2014/04/26/pursue-hdmi-edid-bugs">post</a> expected the missing SOT-23 parts near the HDMI output form a level shifter which convert the 3.3V I2C STB level to the 5V level of the HDMI side an vice versa.</p>

<p>A detailed description of such an level shifter is described in an application note from <a href="http://www.adafruit.com/datasheets/an97055.pdf">Phillips</a>/<a href="http://www.nxp.com/documents/application_note/AN10441.pdf">NXP</a>.</p>

<p>I started with the trace of the EEPROM. I finally found the EEPROM.</p>

<p><img src="http://ch.ege.io/assets/edid/edid_eeprom.jpg" alt="EDID EEPROM" /></p>

<p>There are two serial resistors between I2C SCL and I2C SDA. Which can be more or less easily removed.</p>

<p><img src="http://ch.ege.io/assets/edid/edid_eeprom_disabled.jpg" alt="EDID EEPROM disabled" /></p>

<p>After soldering my very first sot-23 transistor which made me feeling like my soldering iron is too huge for decent jobs. I cursed myself for not taking the box to work where we do have a more professional equipement at least when it comes to soldering irons.</p>

<p>The result looks ugly but seems to work.</p>

<p><img src="http://ch.ege.io/assets/edid/edid_transistor.jpg" alt="EDID Transistor" /></p>

<p>As Transistor I&rsquo;ve chosen some  N-Channel Field Effect Transistor. Anything like a <a href="http://www.fairchildsemi.com/ds/2N/2N7000.pdf">2N7002</a> or a <a href="http://www.fairchildsemi.com/ds/BS/BSS138.pdf">BSS138</a> should do the job.</p>

<p>For me the final result was a working EDID readout of the HDMI monitor&rsquo;s EDID EEPROM. And the first time the STB took the correct HDMI-CEC address. I had not been able to check levels and edges of the 5V signal and the ultimate HDMI-CEC test also have to wait some time. Because my test lab HDMI monitor have no HDMI-CEC support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pursue HDMI EDID Bugs]]></title>
    <link href="http://ch.ege.io/blog/2014/04/26/pursue-hdmi-edid-bugs/"/>
    <updated>2014-04-26T00:00:00+02:00</updated>
    <id>http://ch.ege.io/blog/2014/04/26/pursue-hdmi-edid-bugs</id>
    <content type="html"><![CDATA[<p>Today I tried to track down the <a href="http://en.wikipedia.org/wiki/Extended_display_identification_data">EDID (&ldquo;Extended display identification data&rdquo;)</a> bug on my STi7111 (Golden Media 990CR ) spark box. <a href="http://en.wikipedia.org/wiki/Extended_display_identification_data">EDID</a> is needed to detect the display attached to the set-top box. On the newer STi7105 based boxes this works quite good. But on the STi7111 based spark boxes there is a hardware issue.</p>

<p>During EDID query the frame-buffer driver prints out the following warning message:</p>

<pre><code>stmfb: first EDID byte (255) is corrupt, attempting to fix..
stmfb: Invalid extension header checksum block0
stmfb: first EDID byte (255) is corrupt, attempting to fix..
stmfb: Invalid extension header checksum block0
stmfb: first EDID byte (255) is corrupt, attempting to fix..
stmfb: Invalid extension header checksum block0
stmfb: first EDID byte (255) is corrupt, attempting to fix..
stmfb: Invalid extension header checksum block0
stmfb: EDID Read Error, setup safe EDID
stmfb: Setting Safe EDID
</code></pre>

<p>So I decided to take a look at the hardware and do some test. Because EDID is needed for a working <a href="http://en.wikipedia.org/wiki/HDMI#CEC">HDMI-CEC</a> set-up. The EDID information is stored inside an <a href="http://en.wikipedia.org/wiki/EEPROM">EEPROM</a> on the Television/Montor. The EEPROM is accessed by the STB via an I2C bus.</p>

<p>The result looks a little bit chaotic isn&rsquo;t it?</p>

<p><img src="http://ch.ege.io/assets/edid/overview.jpg" alt="This is what it all ended." /></p>

<p>The image shows the set-top box, a <a href="https://www.saleae.com/logic16">salea logic16</a> logic analyser and a <a href="http://dangerousprototypes.com/docs/Bus_Pirate">DP Bus Pirate</a>. The salea logic analyser is to listen to I2C communication between the various loose ends. Before we can access the HDMI connector and the I2C EDID data lines we have to remove the Ethernet board. This is achieved by removing just one screw and lifting the complete Ethernet board.</p>

<p><img src="http://ch.ege.io/assets/edid/ethernet_board.jpg" alt="Remove the Ethernet board" /></p>

<p>After removing the Ethernet board it looks like this:</p>

<p><img src="http://ch.ege.io/assets/edid/edid_stuff.jpg" alt="EDID stuff" /></p>

<p>For debugging purposes I soldered some wires to the related components. There are two types of I2C bus involved. The one from HDMI which is a 5V type and the one from the STB which is at a 3.3V level. So the not applied components seems to form a level shifter. If I attach an HDMI monitor to the STB I can see transfers from STB to an EEPROM on the board which response with 0xFF in all bytes. But no communication over HDMI. Because the loose ends are not connected.</p>

<p><img src="http://ch.ege.io/assets/edid/cable_zoom.jpg" alt="EDID details" /></p>

<p>With an attached <a href="http://dangerousprototypes.com/docs/Bus_Pirate">bus pirate</a> to the HDMI I2C bus I can readout the EDID information from the attached monitor.</p>

<pre><code>HiZ&gt;m
1. HiZ
2. 1-WIRE
3. UART
4. I2C
5. SPI
6. 2WIRE
7. 3WIRE
8. KEYB
9. LCD
10. PIC
11. DIO
x. exit(without change)

(1)&gt;4
I2C mode:
 1. Software
 2. Hardware

(1)&gt;1
Set speed:
 1. ~5KHz
 2. ~50KHz
 3. ~100KHz
 4. ~400KHz
</code></pre>

<p>The i2c sequence to read data from the EEPROM have to define a start address where we want to read from:</p>

<pre><code>I2C&gt;[0xa0 0]
I2C START BIT
WRITE: 0xA0 ACK
WRITE: 0x00 ACK
I2C STOP BIT
</code></pre>

<p>With this we start from address 0.</p>

<p>So now lets read 128 byte of EDID data:</p>

<pre><code>I2C&gt;[0xa1 r:128]
I2C START BIT
WRITE: 0xA1 ACK
READ: 0x00  ACK 0xFF  ACK 0xFF  ACK 0xFF  ACK 0xFF  ACK 0xFF  ACK 0xFF  ACK 0x00  ACK 0x04  ACK 0x72  ACK 0x30  ACK 0x02  ACK 0x01  ACK 0x00  ACK 0x00  ACK 0x00  ACK 0x08  ACK 0x15  ACK 0x01  ACK 0x03      ACK
 0x80  ACK 0x33  ACK 0x1D  ACK 0x78  ACK 0x0A  ACK 0x90  ACK 0x85  ACK 0xA3  ACK 0x58  ACK 0x53  ACK 0x9F  ACK 0x26  ACK 0x0F  ACK 0x50  ACK 0x54  ACK 0xBF  ACK 0x6F  ACK 0x00  ACK 0x71  ACK 0x4F  ACK     0x81
  ACK 0xC0  ACK 0xD1  ACK 0xC0  ACK 0xB3  ACK 0x00  ACK 0x81  ACK 0x80  ACK 0x01  ACK 0x01  ACK 0x01  ACK 0x01  ACK 0x01  ACK 0x01  ACK 0x02  ACK 0x3A  ACK 0x80  ACK 0x18  ACK 0x71  ACK 0x38  ACK 0x2D      ACK
 0x40  ACK 0x58  ACK 0x2C  ACK 0x45  ACK 0x00  ACK 0xFD  ACK 0x1E  ACK 0x11  ACK 0x00  ACK 0x00  ACK 0x18  ACK 0x01  ACK 0x1D  ACK 0x00  ACK 0x72  ACK 0x51  ACK 0xD0  ACK 0x1E  ACK 0x20  ACK 0x6E  ACK     0x28
  ACK 0x55  ACK 0x00  ACK 0xFD  ACK 0x1E  ACK 0x11  ACK 0x00  ACK 0x00  ACK 0x1E  ACK 0x00  ACK 0x00  ACK 0x00  ACK 0xFD  ACK 0x00  ACK 0x38  ACK 0x4C  ACK 0x1E  ACK 0x4B  ACK 0x0F  ACK 0x00  ACK 0x0A      ACK
 0x20  ACK 0x20  ACK 0x20  ACK 0x20  ACK 0x20  ACK 0x20  ACK 0x00  ACK 0x00  ACK 0x00  ACK 0xFC  ACK 0x00  ACK 0x4D  ACK 0x32  ACK 0x33  ACK 0x30  ACK 0x48  ACK 0x44  ACK 0x4C  ACK 0x0A  ACK 0x20  ACK     0x20
  ACK 0x20  ACK 0x20  ACK 0x20  ACK 0x01  ACK 0x56
NACK
I2C STOP BIT
</code></pre>

<p>We do not need any pull-ups power set-up for the Bus Pirate because the bus is already pulled high by the STB. And due to the fact that I2C only pulls level to low we need no adjustment for 3.3V and 5V.</p>

<p>With some editor regular-expression magic we can form a python snippet to create a binary EDID file we can analyse later.</p>

<pre><code>import struct
edid_txt = [ '0x00', '0xFF', '0xFF', '0xFF', '0xFF', '0xFF', '0xFF', '0x00',
             '0x04', '0x72', '0x30', '0x02', '0x01', '0x00', '0x00', '0x00',
             '0x08', '0x15', '0x01', '0x03', '0x80', '0x33', '0x1D', '0x78',
             '0x0A', '0x90', '0x85', '0xA3', '0x58', '0x53', '0x9F', '0x26',
             '0x0F', '0x50', '0x54', '0xBF', '0x6F', '0x00', '0x71', '0x4F',
             '0x81', '0xC0', '0xD1', '0xC0', '0xB3', '0x00', '0x81', '0x80',
             '0x01', '0x01', '0x01', '0x01', '0x01', '0x01', '0x02', '0x3A',
             '0x80', '0x18', '0x71', '0x38', '0x2D', '0x40', '0x58', '0x2C',
             '0x45', '0x00', '0xFD', '0x1E', '0x11', '0x00', '0x00', '0x18',
             '0x01', '0x1D', '0x00', '0x72', '0x51', '0xD0', '0x1E', '0x20',
             '0x6E', '0x28', '0x55', '0x00', '0xFD', '0x1E', '0x11', '0x00',
             '0x00', '0x1E', '0x00', '0x00', '0x00', '0xFD', '0x00', '0x38',
             '0x4C', '0x1E', '0x4B', '0x0F', '0x00', '0x0A', '0x20', '0x20',
             '0x20', '0x20', '0x20', '0x20', '0x00', '0x00', '0x00', '0xFC',
             '0x00', '0x4D', '0x32', '0x33', '0x30', '0x48', '0x44', '0x4C',
             '0x0A', '0x20', '0x20', '0x20', '0x20', '0x20', '0x01', '0x56' ]

f = open('edid.bin', 'w')

for i in edid_txt:
    bin = int(i,16)
    f.write(struct.pack('B',bin))

f.close()
</code></pre>

<p>For EDID analysis I&rsquo;ve used to tool &ldquo;read-edid&rdquo; which contains a tool called &ldquo;edid-decode&rdquo;.</p>

<pre><code>$ edid-decode edid.bin
Extracted contents:
header:          00 ff ff ff ff ff ff 00
serial number:   04 72 30 02 01 00 00 00 08 15
version:         01 03
basic params:    80 33 1d 78 0a
chroma info:     90 85 a3 58 53 9f 26 0f 50 54
established:     bf 6f 00
standard:        71 4f 81 c0 d1 c0 b3 00 81 80 01 01 01 01 01 01
descriptor 1:    02 3a 80 18 71 38 2d 40 58 2c 45 00 fd 1e 11 00 00 18
descriptor 2:    01 1d 00 72 51 d0 1e 20 6e 28 55 00 fd 1e 11 00 00 1e
descriptor 3:    00 00 00 fd 00 38 4c 1e 4b 0f 00 0a 20 20 20 20 20 20
descriptor 4:    00 00 00 fc 00 4d 32 33 30 48 44 4c 0a 20 20 20 20 20
extensions:      01
checksum:        56

Manufacturer: ACR Model 230 Serial Number 1
Made week 8 of 2011
EDID version: 1.3
Digital display
Maximum image size: 51 cm x 29 cm
Gamma: 2.20
Supported color formats: RGB 4:4:4, YCrCb 4:2:2
First detailed timing is preferred timing
Established timings supported:
  720x400@70Hz
  640x480@60Hz
  640x480@67Hz
  640x480@72Hz
  640x480@75Hz
  800x600@56Hz
  800x600@60Hz
  800x600@75Hz
  832x624@75Hz
  1024x768@60Hz
  1024x768@70Hz
  1024x768@75Hz
  1280x1024@75Hz
Standard timings supported:
  1152x864@75Hz
  1280x768@60Hz
  1920x1152@60Hz
  1680x1050@60Hz
  1280x1024@60Hz
Detailed mode: Clock 148.500 MHz, 509 mm x 286 mm
               1920 2008 2052 2200 hborder 0
               1080 1084 1089 1125 vborder 0
               -hsync -vsync
Detailed mode: Clock 74.250 MHz, 509 mm x 286 mm
               1280 1390 1430 1650 hborder 0
                720  725  730  750 vborder 0
               +hsync +vsync
Monitor ranges: 56-76HZ vertical, 30-75kHz horizontal, max dotclock 150MHz
Monitor name: M230HDL
     Has 1 extension blocks
Checksum: 0x56
</code></pre>

<p>The result looks quite good isn&rsquo;t it? One of the next step would be to connect the loose ends. Or trying to write useful information to the on board eeprom.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assign Static Device Name for USB Infrared Toy]]></title>
    <link href="http://ch.ege.io/blog/2014/04/21/assign-static-device-name-for-usb-infrared-toy/"/>
    <updated>2014-04-21T00:00:00+02:00</updated>
    <id>http://ch.ege.io/blog/2014/04/21/assign-static-device-name-for-usb-infrared-toy</id>
    <content type="html"><![CDATA[<p>The last few days I was playing arround with my <a href="http://dangerousprototypes.com/docs/USB_Infrared_Toy">USB Infrared Toy v2</a> from Dangerous Prototypes. Due to the fact that I have attached some more devices which are detected as <strong>/dev/ACM[0-9]</strong> I decided to write an udev rule to assign a static device name.</p>

<p>I stored the rule in the following file: <strong>/etc/udev/rules.d/98-ir-toy-v2.rules</strong></p>

<pre><code>SUBSYSTEM=="tty", ATTRS{manufacturer}=="Dangerous Prototypes", ATTRS{idProduct}=="fd08", SYMLINK+="ir_toy" MODE="0666"
</code></pre>

<p>Maybe the field <strong>&ldquo;ATTRS{idProduct}==&#8221;fd08&rdquo;&ldquo;</strong> have to be tweaked for versions differnet of v2. With this rule the IR Toy is accessible via <strong>/dev/ir_toy</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewriting History]]></title>
    <link href="http://ch.ege.io/blog/2013/11/04/rewriting-history/"/>
    <updated>2013-11-04T00:00:00+01:00</updated>
    <id>http://ch.ege.io/blog/2013/11/04/rewriting-history</id>
    <content type="html"><![CDATA[<p>Sometimes history has to be rewritten. In real life this is hopefully not possible yet. But in case of git this is possible. Some projecs start with a small repository which evolves over the time to a big bloated repository. Other ones start already bloated. In some cases the wish to split-up the repository in smaller chunks emerges. With some advice from <a href="http://seife.kernalert.de/blog/">Stefan Seyfried</a> I learned how to rewrite history</p>

<p>The goal was to extract the driver directory from the <a href="https://gitorious.org/open-duckbox-project-sh4/tdt">tdt</a> repository like <a href="https://gitorious.org/neutrino-mp/tdt-driver">Stefan</a> already did.</p>

<p>These are the steps to follow:</p>

<pre><code>$ cd /dev/shm/
$ git clone --reference /net/transfer/spark71xx/tdt https://git.gitorious.org/open-duckbox-project-sh4/tdt.git tdt-driver
$ cd tdt-driver/
$ git filter-branch --subdirectory-filter tdt/cvs/driver
</code></pre>

<p>The first step speeds up the process of rewriting by doing it all in memory instead of writing everything onto a slow disk device. But please remember to push your work onto a less volatile memory.</p>

<pre><code>$ cd /dev/shm/
</code></pre>

<p>In the second step the original repository is cloned. To again speedup things I used a local copy as reference. After cloning the directory structure looked like this</p>

<pre><code>$ tree -d -L 3 tdt/
tdt/
â”œâ”€â”€ custom
â”œâ”€â”€ cvs
â”‚Â Â  â”œâ”€â”€ apps
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ dvb
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ enigma1-hd
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ enigma2
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ misc
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ neutrino
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ tuxbox
â”‚Â Â  â”‚Â Â  â””â”€â”€ vdr
â”‚Â Â  â”œâ”€â”€ boot
â”‚Â Â  â”‚Â Â  â””â”€â”€ u-boot-tufsbox
â”‚Â Â  â”œâ”€â”€ cdk
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ integrated_firmware
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ make
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ own_build
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ Patches
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ root
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ static
â”‚Â Â  â”‚Â Â  â””â”€â”€ tfinstaller
â”‚Â Â  â”œâ”€â”€ driver
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ adb_box_fan
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ avs
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ boxtype
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ bpamem
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ button
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ button_hs5101
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ cec
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ cec_adb_box
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ cic
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ compcache
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ cpu_frequ
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ dvbt
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ e2_proc
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ frontcontroller
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ frontends
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ i2c_spi
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ include
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ ipbox99xx_fan
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ led
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ logfs
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ multicom-3.2.2
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ multicom-3.2.4
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ multicom-3.2.4_rc3
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ multicom-4.0.6
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ old
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ player2_131
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ player2_179
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ player2_191
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ pti
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ rmu
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ sata_switch
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ siinfo
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ simu_button
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ smartcard
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ stgfb
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ tfswitch
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ ufs922_fan
â”‚Â Â  â”‚Â Â  â””â”€â”€ wireless
â”‚Â Â  â””â”€â”€ hostapps
â”‚Â Â      â”œâ”€â”€ flash
â”‚Â Â      â”œâ”€â”€ mkfs.jffs2
â”‚Â Â      â””â”€â”€ mklibs
â””â”€â”€ flash
    â”œâ”€â”€ at7500
    â”‚Â Â  â”œâ”€â”€ extras
    â”‚Â Â  â”œâ”€â”€ scripts
    â”‚Â Â  â”œâ”€â”€ scripts_209
    â”‚Â Â  â””â”€â”€ scripts_extended
    â”œâ”€â”€ common
    â”‚Â Â  â”œâ”€â”€ fup.src
    â”‚Â Â  â”œâ”€â”€ mup.src
    â”‚Â Â  â””â”€â”€ pad.src
    â”œâ”€â”€ hs7810a
    â”‚Â Â  â”œâ”€â”€ extras
    â”‚Â Â  â””â”€â”€ scripts
    â”œâ”€â”€ spark
    â”‚Â Â  â”œâ”€â”€ extras
    â”‚Â Â  â””â”€â”€ scripts
    â”œâ”€â”€ tf7700hdpvr
    â”œâ”€â”€ ufc960
    â”‚Â Â  â”œâ”€â”€ extra
    â”‚Â Â  â””â”€â”€ scripts
    â”œâ”€â”€ ufs910
    â”‚Â Â  â””â”€â”€ scripts
    â”œâ”€â”€ ufs912
    â”‚Â Â  â”œâ”€â”€ extras
    â”‚Â Â  â””â”€â”€ scripts
    â””â”€â”€ ufs913
        â”œâ”€â”€ extra
        â”œâ”€â”€ scripts
        â””â”€â”€ test
</code></pre>

<p>The last step extracts just the directory  &lsquo;&#8217;tdt/cvs/driver&rsquo;&#8217;</p>

<pre><code>$ git filter-branch --subdirectory-filter tdt/cvs/driver
</code></pre>

<p>After this step the filesystem looks like this:</p>

<pre><code>$ tree -d -L 1 tdt-driver/
tdt-driver/
â”œâ”€â”€ adb_box_fan
â”œâ”€â”€ avs
â”œâ”€â”€ boxtype
â”œâ”€â”€ bpamem
â”œâ”€â”€ button
â”œâ”€â”€ button_hs5101
â”œâ”€â”€ cec
â”œâ”€â”€ cec_adb_box
â”œâ”€â”€ cic
â”œâ”€â”€ compcache
â”œâ”€â”€ cpu_frequ
â”œâ”€â”€ dvbt
â”œâ”€â”€ e2_proc
â”œâ”€â”€ frontcontroller
â”œâ”€â”€ frontends
â”œâ”€â”€ i2c_spi
â”œâ”€â”€ include
â”œâ”€â”€ ipbox99xx_fan
â”œâ”€â”€ led
â”œâ”€â”€ logfs
â”œâ”€â”€ multicom-3.2.2
â”œâ”€â”€ multicom-3.2.4
â”œâ”€â”€ multicom-3.2.4_rc3
â”œâ”€â”€ multicom-4.0.6
â”œâ”€â”€ old
â”œâ”€â”€ player2_131
â”œâ”€â”€ player2_179
â”œâ”€â”€ player2_191
â”œâ”€â”€ pti
â”œâ”€â”€ rmu
â”œâ”€â”€ sata_switch
â”œâ”€â”€ siinfo
â”œâ”€â”€ simu_button
â”œâ”€â”€ smartcard
â”œâ”€â”€ stgfb
â”œâ”€â”€ tfswitch
â”œâ”€â”€ ufs922_fan
â””â”€â”€ wireless
</code></pre>

<p>There are more steps recommended in a <a href="http://stackoverflow.com/questions/359424/detach-subdirectory-into-separate-git-repository/1591174#1591174">stackoverflow</a> article. These steps had not been necessary for my example.</p>
]]></content>
  </entry>
  
</feed>
