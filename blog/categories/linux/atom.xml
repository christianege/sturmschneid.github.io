<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Sturmschneid]]></title>
  <link href="http://sturmschneid.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://sturmschneid.github.io/"/>
  <updated>2015-05-04T13:36:51+02:00</updated>
  <id>http://sturmschneid.github.io/</id>
  <author>
    <name><![CDATA[Christian Ege]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ODROID-C1 Enabling Bootlogo on Yocto Builds]]></title>
    <link href="http://sturmschneid.github.io/blog/2015/05/04/odroid-c1-enabling-bootlogo-on-yocto-builds/"/>
    <updated>2015-05-04T11:40:53+02:00</updated>
    <id>http://sturmschneid.github.io/blog/2015/05/04/odroid-c1-enabling-bootlogo-on-yocto-builds</id>
    <content type="html"><![CDATA[<p>The U-Boot for the Amlogic S805 from <a href="https://github.com/hardkernel/u-boot/tree/odroidc-v2011.03">Hardkernel</a> has the capabilities to display a bootlogo. It is not that easy to find any bootlogo that complies to a licence which can be used in comercial and in open source environments. Using the yocto logo is most probably prohibited, so I decided to design my own logo. And saved it to <strong> 24-bit Windows BMP image</strong> with the dimension of <strong>1280Ã—720</strong> as statet in the <a href="http://odroid.com/dokuwiki/doku.php?id=en:c1_tips#logo_file_format">ODROID-C1 Wiki</a></p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/linux-meson/meta-amlogic/fido/recipes-bsp/u-boot/u-boot-odroidc1/odroidc1/bootlogo.png">https://raw.githubusercontent.com/linux-meson/meta-amlogic/fido/recipes-bsp/u-boot/u-boot-odroidc1/odroidc1/bootlogo.png</a>&#8221;></p>

<h2>Modifying boot.ini</h2>

<p>In my Amlogic meta layer for the yocto build system I do not use a Fat32 boot partition so the <a href="">original bootlogo loading command</a> needed some minor modifications. The bootlogo is name bootlogo.bmp and should be copied to /boot.</p>

<pre><code># loading and displaying bootlogo
logo size ${outputmode}
video open
video clear
video dev open ${outputmode}
ext4load mmc 0:1 ${loadaddr_logo} /boot/bootlogo.bmp
bmp display ${loadaddr_logo}
bmp scale
</code></pre>

<p>You can either add this to your boot.ini or wait until I pushed a patch for <a href="https://github.com/linux-meson/meta-amlogic">meta-amlogic</a>.</p>

<h2>Modifying the U-Boot environment</h2>

<p>Another option is to change the U-Boot environment. There is already a variable called <em>preloadlogo</em>. We can update the command to load the bootlogo from ext4 instead of Fat32</p>

<pre><code>setenv preloadlogo 'logo size ${outputmode};video open;video clear;video dev open ${outputmode};ext4load mmc 0:1 ${loadaddr_logo} /boot/bootlogo.bmp;bmp display ${loadaddr_logo};bmp scale'
</code></pre>

<p>Pleas ensure, that you paste this as a single line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using H/W Randaom Generator on ODROD-C1 With Yocto]]></title>
    <link href="http://sturmschneid.github.io/blog/2015/05/04/using-h-slash-w-randaom-generator-on-odrod-c1-with-yocto/"/>
    <updated>2015-05-04T05:30:18+02:00</updated>
    <id>http://sturmschneid.github.io/blog/2015/05/04/using-h-slash-w-randaom-generator-on-odrod-c1-with-yocto</id>
    <content type="html"><![CDATA[<p>The Amlogic S805 CPU used in the ODROID-C1 contains a hardware random number generator which can be used to increase entropy in the linux kernel. The guys at Hardkernel wrote a <a href="http://odroid.com/dokuwiki/doku.php?id=en:c1_hardware_number_generator">tutorial how to enable this in Ubuntu</a>.</p>

<p>Due to the fact that there is a <a href="http://cgit.openembedded.org/meta-openembedded/tree/meta-oe/recipes-support/rng-tools/rng-tools_4.bb?h=fido">rng-tools recipe</a> in the <a href="http://cgit.openembedded.org/meta-openembedded/">meta-openembedded</a> repo I thought it would be a no-brainer to get this working in Yocto fido.</p>

<p>Before you can build the rng-tools you need the <a href="http://cgit.openembedded.org/meta-openembedded/">meta-openembedded</a> meta-oe layer in your bblayer configuration file this may look like this</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff &amp;ndash;git a/conf/bblayers.conf b/conf/bblayers.conf</span>
</span><span class='line'><span class="gh">index d999c9d..fcf7bf2 100644</span>
</span><span class='line'>&amp;mdash; a/conf/bblayers.conf
</span><span class='line'><span class="gi">+++ b/conf/bblayers.conf</span>
</span><span class='line'><span class="gu">@@ -9,8 +9,12 @@ BBLAYERS ?= &amp;ldquo; \</span>
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta \
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta-yocto \
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta-yocto-bsp \
</span><span class='line'><span class="gi">+  /build/hardkernel/odroid-c1/meta-amlogic \</span>
</span><span class='line'><span class="gi">+  /build/hardkernel/odroid-c1/meta-openembedded/meta-oe \</span>
</span><span class='line'>   &amp;rdquo;
</span></code></pre></td></tr></table></div></figure></p>

<p>After adding the meta-oe layer and preparing the bitbake environment we can build the rng-tools recipe</p>

<pre><code>$ source poky/oe-init-build-env build/
$ bitbake rng-tools
</code></pre>

<p>The resulting file can be transfered to the target and installed with the defined package manger. In my case I do use opkg. Please ensure you are using a image with a package manager enabled. I do use core-image-base and add the following to conf/local.conf:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff &amp;ndash;git a/conf/local.conf b/conf/local.conf</span>
</span><span class='line'><span class="gh">index a1d99f9..3e200c9 100644</span>
</span><span class='line'>&amp;mdash; a/conf/local.conf
</span><span class='line'><span class="gi">+++ b/conf/local.conf</span>
</span><span class='line'><span class="gu">@@ -104,13 +119,13 @@ DISTRO ?= &amp;ldquo;poky&amp;rdquo;</span>
</span><span class='line'> #  - &amp;lsquo;package_rpm&amp;rsquo; for rpm style packages
</span><span class='line'> # E.g.: PACKAGE_CLASSES ?= &amp;ldquo;package_rpm package_deb package_ipk&amp;rdquo;
</span><span class='line'> # We default to rpm:
</span><span class='line'><span class="gd">-PACKAGE_CLASSES ?= &amp;ldquo;package_rpm&amp;rdquo;</span>
</span><span class='line'><span class="gi">+PACKAGE_CLASSES ?= &amp;ldquo;package_ipk&amp;rdquo;</span>
</span><span class='line'><span class="gu">@@ -137,13 +152,13 @@ PACKAGE_CLASSES ?= &amp;ldquo;package_rpm&amp;rdquo;</span>
</span><span class='line'> # There are other application targets that can be used here too, see
</span><span class='line'> # meta/classes/image.bbclass and meta/classes/core-image.bbclass for more details.
</span><span class='line'> # We default to enabling the debugging tweaks.
</span><span class='line'><span class="gd">-EXTRA_IMAGE_FEATURES = &amp;ldquo;debug-tweaks&amp;rdquo;</span>
</span><span class='line'><span class="gi">+EXTRA_IMAGE_FEATURES = &amp;ldquo;debug-tweaks package-management ssh-server-dropbear&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Let&rsquo;s transfer the resulting files to the target.</p>

<pre><code>$ find tmp/deploy/ipk/ -name "rng-tools*"
$ scp tmp/deploy/ipk/cortexa5hf-vfp-neon/rng-tools_4-r0_cortexa5hf-vfp-neon.ipk root@odroidc1:/tmp
</code></pre>

<p><strong>Attention</strong>: At the moment the recipe for the rng-tools packages installs it&rsquo;s configuration to <em>/etc/rng-tools</em> but the initscript expects it at <em>/etc/default/rng-tools</em>. I send a <a href="http://article.gmane.org/gmane.comp.handhelds.openembedded/68813">patch</a> to the meta-openembedded mailinglist to correct this. The current behaviour of the rng-tools should be pretty okay due to the fact that given no &ldquo;-r&rdquo; option the default behavior is to use /dev/hwrng.</p>

<h2>Benchmarks</h2>

<p>The rng-tools provide some statistical tests for checking if the hardware random generator works as expected.</p>

<h3>Without rngd</h3>

<p>This runs the <a href="http://en.wikipedia.org/wiki/FIPS_140-2">FIPS 140-2 tests</a> against the device <em>/dev/random</em> <strong>without</strong> running rngd</p>

<pre><code>root@odroidc1:~# time rngtest -c1 &lt; /dev/random
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 20032
rngtest: FIPS 140-2 successes: 1
rngtest: FIPS 140-2 failures: 0
rngtest: FIPS 140-2(2001-10-10) Monobit: 0
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=132.975; avg=132.975; max=132.975)bits/s
rngtest: FIPS tests speed: (min=55.934; avg=55.934; max=55.934)Mibits/s
rngtest: Program run time: 150404986 microseconds
real    2m 30.40s
user    0m 0.00s
sys     0m 0.01s
</code></pre>

<p>The average of <strong>132.975 bits/s</strong> throughput is pretty low.</p>

<h3>With rngd</h3>

<p>This runs the <a href="http://en.wikipedia.org/wiki/FIPS_140-2">FIPS 140-2 tests</a> against the device <em>/dev/random</em> <strong>with</strong> running rngd</p>

<pre><code>root@odroidc1:~# /etc/init.d/rng-tools start
root@odroidc1:~# time rngtest -c1 &lt; /dev/random
root@odroidc1:~# time rngtest -c100 &lt; /dev/random
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 2000032
rngtest: FIPS 140-2 successes: 99
rngtest: FIPS 140-2 failures: 1
rngtest: FIPS 140-2(2001-10-10) Monobit: 1
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=5.034; avg=5.310; max=5.374)Mibits/s
rngtest: FIPS tests speed: (min=53.880; avg=58.279; max=58.688)Mibits/s
rngtest: Program run time: 392465 microseconds
Command exited with non-zero status 1
real    0m 0.39s
user    0m 0.03s
sys     0m 0.36s
</code></pre>

<p>Now we have an average throughput of <strong>5.310 Mibits/s</strong> compared to the <strong>132.975 bits/s</strong> without rngd.</p>

<h2>Considerations</h2>

<p>You might keep in mind that using a hardware random generator may cause security issues. To have a more detailed view on this read this posting and comments on <a href="https://plus.google.com/+TheodoreTso/posts/SDcoemc9V3J">Theodore Ts&#8217;o posting on G+</a>. From this posting <em>If I were the NSA, and I wanted to gimmick an RNG, whether it be the one inside the Intel chip or the Android build, it would be a counter encrypted by an AES key known by the NSA.  (Why AES?   Because RDRAND is documented as using AES in its final whitening stage; so someone taking a quick look at the RDRAND implementation would be expecting AES).</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the SEGGER J-Link to Access the TI CC2650 Chip]]></title>
    <link href="http://sturmschneid.github.io/blog/2015/04/12/using-the-segger-j-link-to-access-the-ti-cc2650-chip/"/>
    <updated>2015-04-12T17:07:32+02:00</updated>
    <id>http://sturmschneid.github.io/blog/2015/04/12/using-the-segger-j-link-to-access-the-ti-cc2650-chip</id>
    <content type="html"><![CDATA[<p>Before you get started install the <a href="https://www.segger.com/jlink-software.html">newest host tools</a> for your SEGGER in my case I installed the Debian package of version <strong>V4.98b</strong>. On first start the <strong>JLinExe</strong> installs the apropriate Firmware.</p>

<pre><code>$ JLinkExe -if jtag -device CC2650F128
SEGGER J-Link Commander V4.98b ('?' for help)
Compiled Apr 10 2015 20:27:38
Updating firmware:  J-Link V9 compiled Apr 10 2015 10:51:08
Replacing firmware: J-Link V9 compiled Feb 13 2015 20:37:28
Waiting for new firmware to boot
New firmware booted successfully
</code></pre>

<p>On the <a href="http://www.ti.com/tool/cc2650stk">SimpleLinkâ„¢ Bluetooth SmartÂ®/Multi-Standard SensorTag</a> they use the <a href="http://www.ti.com/product/cc2650">CC2650</a> with 128kB of Flash ROM. So you have to select <em>-device CC2650F128</em> when running <strong>JLinkExe</strong> At the moment it seems the <a href="http://www.ti.com/product/cc2650">CC2650</a> only supports JTAG debugging and not the more common SWI debug like STM32 do use. Anyway The Segger can run both modes.</p>

<p>After a succesful firmawre update the communication looks like this</p>

<pre><code>SEGGER J-Link Commander V4.98b ('?' for help)
Compiled Apr 10 2015 20:27:38
Info: Device "CC2650F128" selected.
DLL version V4.98b, compiled Apr 10 2015 20:27:35
Firmware: J-Link V9 compiled Apr 10 2015 10:51:08
Hardware: V9.30
S/N: XXXXXXXX
OEM: SEGGER-EDU
Feature(s): FlashBP, GDB
VTarget = 2.800V
Info: TotalIRLen = 10, IRPrint = 0x0011
Info: Found Cortex-M3 r2p1, Little endian.
Info: FPUnit: 6 code (BP) slots and 2 literal slots
Info: CoreSight components:
Info: ROMTbl 0 @ E00FF000
Info: ROMTbl 0 [0]: FFF0F000, CID: B105E00D, PID: 000BB000 SCS
Info: ROMTbl 0 [1]: FFF02000, CID: B105E00D, PID: 003BB002 DWT
Info: ROMTbl 0 [2]: FFF03000, CID: B105E00D, PID: 002BB003 FPB
Info: ROMTbl 0 [3]: FFF01000, CID: B105E00D, PID: 003BB001 ITM
Info: ROMTbl 0 [4]: FFF41000, CID: B105900D, PID: 003BB923 TPIU-Lite
Found 2 JTAG devices, Total IRLen = 10:
 #0 Id: 0x4BA00477, IRLen: 04, IRPrint: 0x1, CoreSight JTAG-DP (ARM)
 #1 Id: 0x8B99A02F, IRLen: 06, IRPrint: 0x1, TI ICEPick
Cortex-M3 identified.
Target interface speed: 100 kHz
J-Link&gt;
</code></pre>

<p>The next step is to create a firmware backup of the original firmware. This is needed because this little beast at the momemnt denies to build its firmware under Linux. The CodeComposerStudio Projekt is using some Windows Tools to build and expects a specific directory layout.</p>
]]></content>
  </entry>
  
</feed>
