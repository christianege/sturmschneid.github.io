<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Yocto | Sturmschneid]]></title>
  <link href="http://ch.ege.io/blog/categories/yocto/atom.xml" rel="self"/>
  <link href="http://ch.ege.io/"/>
  <updated>2015-10-31T18:42:32+01:00</updated>
  <id>http://ch.ege.io/</id>
  <author>
    <name><![CDATA[Christian Ege]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Attaching a Serial Console to UDOO Neo]]></title>
    <link href="http://ch.ege.io/blog/2015/10/31/attaching-a-serial-console-to-udoo-neo/"/>
    <updated>2015-10-31T16:56:22+01:00</updated>
    <id>http://ch.ege.io/blog/2015/10/31/attaching-a-serial-console-to-udoo-neo</id>
    <content type="html"><![CDATA[<p>Yesterday my long time awaited <a href="http://www.udoo.org/udoo-neo/">UDOO Neo</a> board has arrived. They do provide a really good <a href="http://www.udoo.org/get-started-neo/">getting started guide</a> for UDOO Neo. But for my Yocto Port I need access to the serial console to check the output of the U-Boot and the kernel. So I&rsquo;ve checked the <a href="http://udoo.org/download/files/schematics/UDOO_NEO_schematics.pdf">UDOO Neo Schematics</a> and located UART1 on the connector J7.</p>

<p><img src="/images/posts/UDOOUartNeo.png"></p>

<p>It is so incredible that they do provide the schematics. It is much easier to check the PINOUT. To connect the UDOO to a terminal client you need the following stuff</p>

<ul>
<li>1 x USB to serial converter with 3.3V output. Do not use any 5V type, this may damage your UDOO Neo! I use some cheap Chinese <a href="https://hackaday.com/tag/ch341">CH341</a> USB to UART converters. They cost about 3â‚¬ but are not FTDI clones.</li>
<li>3 Jumper wires. It depends on your USB to serial converter if you need male <-> male or female <-> male. I needed female <-> male connectors</li>
<li>1 x <a href="http://www.udoo.org/udoo-neo/">UDOO Neo board</a></li>
<li>1 x Powersupply for the Neo.</li>
<li>1 x Micro SD-Card with the UDOOBuntu or a <a href="http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo/">Yocto build</a> for UDOO Neo</li>
</ul>


<p>For power connection and flashing the SD-Card please have a look at the <a href="http://www.udoo.org/get-started-neo/">getting started guide</a> for UDOO Neo.</p>

<p>Before you plug-in the serial wires you have to remove any power source from the UDOO board. Otherwise you may damage your board. Double check if your adapter is a 3.3V. Connect the ground line (GND) of your USB to serial converter with the PIN 11 of the J7 connector. Then you have to connect the RX and TX PINs. But remember you have to cross them. Why do we need to cross RX and TX?</p>

<p>This is because <code>TX</code> is transmit and if the UDOO Board and your PC are transmitting on the same line nothing is received on both sides. So you have to connect the <code>RX</code> PIN of the UDOO board, PIN 4 of J7, with the <code>TX</code> PIN of your converter. The <code>TX</code>, PIN 2 of J7, from UDOO is connected to the <code>RX</code> PIN of converter.</p>

<p><img src="/images/posts/UDOONeoAndUSBSeriell.png"></p>

<p>After this you can check <a href="http://www.udoo.org/tutorial/connecting-via-serial-cable/">their tutorial how to fire up an Terminal Emulator</a> on your Platform of choice and connect to the NEO at the following settings:</p>

<ul>
<li>115200 kB</li>
<li>8N1</li>
<li>No Flow-Control</li>
</ul>


<p>I do prefer minicom under Linux for this job.</p>

<h1>UDOO Neo direct USB console</h1>

<p>You may have noticed while booting the official <a href="http://www.udoo.org/get-started-neo/">UDOOBuntu image</a> image a new disk is suddenly mounted on your PC. And you have a new network interface connected as well. Last but not least even a new serial interface is available.</p>

<pre><code>[...]
[ 4885.463264] cdc_acm 4-1.4.1.1:1.2: ttyACM0: USB ACM device
[ 4885.463682] usbcore: registered new interface driver cdc_acm
[ 4885.463685] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
[...]
</code></pre>

<p>You can use minicom with <code>/dev/ttyACM0</code> and the same settings like above.</p>

<pre><code>Ubuntu 14.04.3 LTS udooneo ttyGS0


default username:password is [udooer:udooer]
udooneo login:
</code></pre>

<p>This is absolutely awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweaking Freescales Yocto Community BSP Builds]]></title>
    <link href="http://ch.ege.io/blog/2015/09/22/tweaking-freescales-yocto-community-bsp-builds/"/>
    <updated>2015-09-22T08:42:22+02:00</updated>
    <id>http://ch.ege.io/blog/2015/09/22/tweaking-freescales-yocto-community-bsp-builds</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/scrumnl">Maurice le Rutte</a> asked me on Twitter if it is possible to add support for the first UDOO board and building a <a href="https://en.wikipedia.org/wiki/DirectFB">DirectFB</a> enabled image. After some research it looked like a solution for the DirectFB task should be not that big issue.</p>

<p>I guess you have already a running Yocto environment based on the Freescale BSP comunity layers. To build a DirectFB image some tweaking is needed. You have to add those lines to your <code>conf/local.conf</code></p>

<pre><code>DISTRO_FEATURES_remove = "x11"
DISTRO_FEATURES_remove = "wayland"
DISTRO_FEATURES_append = " directfb"
</code></pre>

<p>The first two lines remove support for wayland and X11 which will conflict with DirectFB and will prevent a successful build. With this modification you can build a DirectFB image. The extra white space in front of directfb is mandatory!</p>

<pre><code>bitbake core-image-directfb
</code></pre>

<p>This is the right time to fetch some coffee.</p>

<p>Another tweak I prefer to do in the <code>conf/local.conf</code> is switching from RPM to IPK as package manager. It is more lightweight and a little bit faster than RPM or DEB. You only have to change the variable <code>PACKAGE_CLASSES</code> to <code>package_ipk</code></p>

<pre><code>PACKAGE_CLASSES ?= "package_ipk"
</code></pre>

<p>At the moment I am working on a Machine configuration for the <a href="http://www.udoo.org/udoo-dual-and-quad/">UDOO Quad board</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenEmbedded Support for the Upcomming UDOO Neo]]></title>
    <link href="http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo/"/>
    <updated>2015-09-19T19:18:03+02:00</updated>
    <id>http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo</id>
    <content type="html"><![CDATA[<p>After beeing part of the <a href="https://www.kickstarter.com/projects/udoo/udoo-neo-raspberry-pi-arduino-wi-fi-bt-40-sensors/?src=i1">Kickstarter campaign</a> for the <a href="http://www.udoo.org/udoo-neo/">UDOO NEO board</a>. I am looking forward to play with this little beast.</p>

<p><img class="center <a" src="href="http://cdn.udoo.org/wp-content/uploads/2015/03/UDOO_neo_up2_ks_funded.png">http://cdn.udoo.org/wp-content/uploads/2015/03/UDOO_neo_up2_ks_funded.png</a>&#8221;></p>

<p>During the meantime I decided to add the <a href="http://www.udoo.org/udoo-neo/">UDOO NEO board</a> to the <a href="https://github.com/Freescale/meta-fsl-arm-extra">Freescale OpenEmbedded community layer</a>. Due to the fact my board did not yet arrived I&rsquo;ve not yet created a patch to ask for integration into the official <a href="https://github.com/Freescale/meta-fsl-arm-extra">Freescale OpenEmbedded community layer</a>. This will be done when I&rsquo;ve tested the layer.</p>

<p>If you are interested in my work you can find my personal fork right <a href="https://github.com/graugans/meta-fsl-arm-extra/">here at github</a>.
You have to use the <a href="https://github.com/graugans/meta-fsl-arm-extra/tree/fido">fido</a> branch. To keep things simple I&rsquo;ve created my own
branch of the <a href="https://github.com/graugans/fsl-community-bsp-platform">fsl-community-bsp-platform</a> repo repository.</p>

<h1>Installing the BSP</h1>

<p>To get the BSP you need to have repo installed and use it as:</p>

<p>Install the repo utility:</p>

<pre><code>$: mkdir ~/bin
$: curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
$: chmod a+x ~/bin/repo
</code></pre>

<p>Download the BSP source:</p>

<pre><code>$: PATH=${PATH}:~/bin
$: mkdir fsl-community-bsp
$: cd fsl-community-bsp
$: repo init -u https://github.com/graugans/fsl-community-bsp-platform -b fido
$: repo sync
</code></pre>

<p>At the end of the commands you have every metadata you need to start work with.</p>

<h1>Building the Image</h1>

<p>To start a base image build execute the following command on a decent machine and grab some coffee&hellip;</p>

<p>$: source ./setup-environment udooneo-build
$: bitbake core-image-base</p>

<p>If everything was build fine you&rsquo;ll find a SD-Card image right here:</p>

<pre><code>tmp/deploy/images/udooneo/core-image-base-udooneo.sdcard
</code></pre>

<p>You can write this image directly to any supported SD-Card. Plug it into your freshly unboxed UDOO NEO and hopefully have fun. This image is completly untested and you have to use it on your own risk&hellip;</p>

<h1>Creating your personal Toolchain</h1>

<p>If you want to develop your own software for the UDOO Neo you&rsquo;ll need some cross toolchain. This can be achieved very easy with the OpenEmbedded universe.</p>

<pre><code>$ bitbake core-image-base -cpopulate_sdk
</code></pre>

<p>The resulting self extracting shell script you&rsquo;ll find right here:</p>

<pre><code>tmp/deploy/sdk/poky-glibc-x86_64-core-image-base-cortexa9hf-vfp-neon-toolchain-1.8.sh
</code></pre>

<p>In case of any questions just leave a comment on my Blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ODROID-C1 Enabling Bootlogo on Yocto Builds]]></title>
    <link href="http://ch.ege.io/blog/2015/05/04/odroid-c1-enabling-bootlogo-on-yocto-builds/"/>
    <updated>2015-05-04T11:40:53+02:00</updated>
    <id>http://ch.ege.io/blog/2015/05/04/odroid-c1-enabling-bootlogo-on-yocto-builds</id>
    <content type="html"><![CDATA[<p>The U-Boot for the Amlogic S805 from <a href="https://github.com/hardkernel/u-boot/tree/odroidc-v2011.03">Hardkernel</a> has the capabilities to display a bootlogo. It is not that easy to find any bootlogo that complies to a licence which can be used in comercial and in open source environments. Using the yocto logo is most probably prohibited, so I decided to design my own logo. And saved it to <strong> 24-bit Windows BMP image</strong> with the dimension of <strong>1280Ã—720</strong> as statet in the <a href="http://odroid.com/dokuwiki/doku.php?id=en:c1_tips#logo_file_format">ODROID-C1 Wiki</a></p>

<p><img class="<a" src="href="https://raw.githubusercontent.com/linux-meson/meta-amlogic/fido/recipes-bsp/u-boot/u-boot-odroidc1/odroidc1/bootlogo.png">https://raw.githubusercontent.com/linux-meson/meta-amlogic/fido/recipes-bsp/u-boot/u-boot-odroidc1/odroidc1/bootlogo.png</a>&#8221;></p>

<h2>Modifying boot.ini</h2>

<p>In my Amlogic meta layer for the yocto build system I do not use a Fat32 boot partition so the <a href="">original bootlogo loading command</a> needed some minor modifications. The bootlogo is name bootlogo.bmp and should be copied to /boot.</p>

<pre><code># loading and displaying bootlogo
logo size ${outputmode}
video open
video clear
video dev open ${outputmode}
ext4load mmc 0:1 ${loadaddr_logo} /boot/bootlogo.bmp
bmp display ${loadaddr_logo}
bmp scale
</code></pre>

<p>You can either add this to your boot.ini or wait until I pushed a patch for <a href="https://github.com/linux-meson/meta-amlogic">meta-amlogic</a>.</p>

<h2>Modifying the U-Boot environment</h2>

<p>Another option is to change the U-Boot environment. There is already a variable called <em>preloadlogo</em>. We can update the command to load the bootlogo from ext4 instead of Fat32</p>

<pre><code>setenv preloadlogo 'logo size ${outputmode};video open;video clear;video dev open ${outputmode};ext4load mmc 0:1 ${loadaddr_logo} /boot/bootlogo.bmp;bmp display ${loadaddr_logo};bmp scale'
</code></pre>

<p>Pleas ensure, that you paste this as a single line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using H/W Randaom Generator on ODROD-C1 With Yocto]]></title>
    <link href="http://ch.ege.io/blog/2015/05/04/using-h-slash-w-randaom-generator-on-odrod-c1-with-yocto/"/>
    <updated>2015-05-04T05:30:18+02:00</updated>
    <id>http://ch.ege.io/blog/2015/05/04/using-h-slash-w-randaom-generator-on-odrod-c1-with-yocto</id>
    <content type="html"><![CDATA[<p>The Amlogic S805 CPU used in the ODROID-C1 contains a hardware random number generator which can be used to increase entropy in the linux kernel. The guys at Hardkernel wrote a <a href="http://odroid.com/dokuwiki/doku.php?id=en:c1_hardware_number_generator">tutorial how to enable this in Ubuntu</a>.</p>

<p>Due to the fact that there is a <a href="http://cgit.openembedded.org/meta-openembedded/tree/meta-oe/recipes-support/rng-tools/rng-tools_4.bb?h=fido">rng-tools recipe</a> in the <a href="http://cgit.openembedded.org/meta-openembedded/">meta-openembedded</a> repo I thought it would be a no-brainer to get this working in Yocto fido.</p>

<p>Before you can build the rng-tools you need the <a href="http://cgit.openembedded.org/meta-openembedded/">meta-openembedded</a> meta-oe layer in your bblayer configuration file this may look like this</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff &amp;ndash;git a/conf/bblayers.conf b/conf/bblayers.conf</span>
</span><span class='line'><span class="gh">index d999c9d..fcf7bf2 100644</span>
</span><span class='line'>&amp;mdash; a/conf/bblayers.conf
</span><span class='line'><span class="gi">+++ b/conf/bblayers.conf</span>
</span><span class='line'><span class="gu">@@ -9,8 +9,12 @@ BBLAYERS ?= &amp;ldquo; \</span>
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta \
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta-yocto \
</span><span class='line'>   /build/hardkernel/odroid-c1/poky/meta-yocto-bsp \
</span><span class='line'><span class="gi">+  /build/hardkernel/odroid-c1/meta-amlogic \</span>
</span><span class='line'><span class="gi">+  /build/hardkernel/odroid-c1/meta-openembedded/meta-oe \</span>
</span><span class='line'>   &amp;rdquo;
</span></code></pre></td></tr></table></div></figure></p>

<p>After adding the meta-oe layer and preparing the bitbake environment we can build the rng-tools recipe</p>

<pre><code>$ source poky/oe-init-build-env build/
$ bitbake rng-tools
</code></pre>

<p>The resulting file can be transfered to the target and installed with the defined package manger. In my case I do use opkg. Please ensure you are using a image with a package manager enabled. I do use core-image-base and add the following to conf/local.conf:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff &amp;ndash;git a/conf/local.conf b/conf/local.conf</span>
</span><span class='line'><span class="gh">index a1d99f9..3e200c9 100644</span>
</span><span class='line'>&amp;mdash; a/conf/local.conf
</span><span class='line'><span class="gi">+++ b/conf/local.conf</span>
</span><span class='line'><span class="gu">@@ -104,13 +119,13 @@ DISTRO ?= &amp;ldquo;poky&amp;rdquo;</span>
</span><span class='line'> #  - &amp;lsquo;package_rpm&amp;rsquo; for rpm style packages
</span><span class='line'> # E.g.: PACKAGE_CLASSES ?= &amp;ldquo;package_rpm package_deb package_ipk&amp;rdquo;
</span><span class='line'> # We default to rpm:
</span><span class='line'><span class="gd">-PACKAGE_CLASSES ?= &amp;ldquo;package_rpm&amp;rdquo;</span>
</span><span class='line'><span class="gi">+PACKAGE_CLASSES ?= &amp;ldquo;package_ipk&amp;rdquo;</span>
</span><span class='line'><span class="gu">@@ -137,13 +152,13 @@ PACKAGE_CLASSES ?= &amp;ldquo;package_rpm&amp;rdquo;</span>
</span><span class='line'> # There are other application targets that can be used here too, see
</span><span class='line'> # meta/classes/image.bbclass and meta/classes/core-image.bbclass for more details.
</span><span class='line'> # We default to enabling the debugging tweaks.
</span><span class='line'><span class="gd">-EXTRA_IMAGE_FEATURES = &amp;ldquo;debug-tweaks&amp;rdquo;</span>
</span><span class='line'><span class="gi">+EXTRA_IMAGE_FEATURES = &amp;ldquo;debug-tweaks package-management ssh-server-dropbear&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Let&rsquo;s transfer the resulting files to the target.</p>

<pre><code>$ find tmp/deploy/ipk/ -name "rng-tools*"
$ scp tmp/deploy/ipk/cortexa5hf-vfp-neon/rng-tools_4-r0_cortexa5hf-vfp-neon.ipk root@odroidc1:/tmp
</code></pre>

<p><strong>Attention</strong>: At the moment the recipe for the rng-tools packages installs it&rsquo;s configuration to <em>/etc/rng-tools</em> but the initscript expects it at <em>/etc/default/rng-tools</em>. I send a <a href="http://article.gmane.org/gmane.comp.handhelds.openembedded/68813">patch</a> to the meta-openembedded mailinglist to correct this. The current behaviour of the rng-tools should be pretty okay due to the fact that given no &ldquo;-r&rdquo; option the default behavior is to use /dev/hwrng.</p>

<h2>Benchmarks</h2>

<p>The rng-tools provide some statistical tests for checking if the hardware random generator works as expected.</p>

<h3>Without rngd</h3>

<p>This runs the <a href="http://en.wikipedia.org/wiki/FIPS_140-2">FIPS 140-2 tests</a> against the device <em>/dev/random</em> <strong>without</strong> running rngd</p>

<pre><code>root@odroidc1:~# time rngtest -c1 &lt; /dev/random
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 20032
rngtest: FIPS 140-2 successes: 1
rngtest: FIPS 140-2 failures: 0
rngtest: FIPS 140-2(2001-10-10) Monobit: 0
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=132.975; avg=132.975; max=132.975)bits/s
rngtest: FIPS tests speed: (min=55.934; avg=55.934; max=55.934)Mibits/s
rngtest: Program run time: 150404986 microseconds
real    2m 30.40s
user    0m 0.00s
sys     0m 0.01s
</code></pre>

<p>The average of <strong>132.975 bits/s</strong> throughput is pretty low.</p>

<h3>With rngd</h3>

<p>This runs the <a href="http://en.wikipedia.org/wiki/FIPS_140-2">FIPS 140-2 tests</a> against the device <em>/dev/random</em> <strong>with</strong> running rngd</p>

<pre><code>root@odroidc1:~# /etc/init.d/rng-tools start
root@odroidc1:~# time rngtest -c1 &lt; /dev/random
root@odroidc1:~# time rngtest -c100 &lt; /dev/random
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 2000032
rngtest: FIPS 140-2 successes: 99
rngtest: FIPS 140-2 failures: 1
rngtest: FIPS 140-2(2001-10-10) Monobit: 1
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=5.034; avg=5.310; max=5.374)Mibits/s
rngtest: FIPS tests speed: (min=53.880; avg=58.279; max=58.688)Mibits/s
rngtest: Program run time: 392465 microseconds
Command exited with non-zero status 1
real    0m 0.39s
user    0m 0.03s
sys     0m 0.36s
</code></pre>

<p>Now we have an average throughput of <strong>5.310 Mibits/s</strong> compared to the <strong>132.975 bits/s</strong> without rngd.</p>

<h2>Considerations</h2>

<p>You might keep in mind that using a hardware random generator may cause security issues. To have a more detailed view on this read this posting and comments on <a href="https://plus.google.com/+TheodoreTso/posts/SDcoemc9V3J">Theodore Ts&#8217;o posting on G+</a>. From this posting <em>If I were the NSA, and I wanted to gimmick an RNG, whether it be the one inside the Intel chip or the Android build, it would be a counter encrypted by an AES key known by the NSA.  (Why AES?   Because RDRAND is documented as using AES in its final whitening stage; so someone taking a quick look at the RDRAND implementation would be expecting AES).</em></p>
]]></content>
  </entry>
  
</feed>
