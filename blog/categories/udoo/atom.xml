<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Udoo | Sturmschneid]]></title>
  <link href="http://ch.ege.io/blog/categories/udoo/atom.xml" rel="self"/>
  <link href="http://ch.ege.io/"/>
  <updated>2015-10-31T18:40:44+01:00</updated>
  <id>http://ch.ege.io/</id>
  <author>
    <name><![CDATA[Christian Ege]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Attaching a Serial Console to UDOO Neo]]></title>
    <link href="http://ch.ege.io/blog/2015/10/31/attaching-a-serial-console-to-udoo-neo/"/>
    <updated>2015-10-31T16:56:22+01:00</updated>
    <id>http://ch.ege.io/blog/2015/10/31/attaching-a-serial-console-to-udoo-neo</id>
    <content type="html"><![CDATA[<p>Yesterday my long time awaited <a href="http://www.udoo.org/udoo-neo/">UDOO Neo</a> board has arrived. They do provide a really good <a href="http://www.udoo.org/get-started-neo/">getting started guide</a> for UDOO Neo. But for my Yocto Port I need access to the serial console to check the output of the U-Boot and the kernel. So I&rsquo;ve checked the <a href="http://udoo.org/download/files/schematics/UDOO_NEO_schematics.pdf">UDOO Neo Schematics</a> and located UART1 on the connector J7.</p>

<p><img src="/images/posts/UDOOUartNeo.png"></p>

<p>It is so incredible that they do provide the schematics. It is much easier to check the PINOUT. To connect the UDOO to a terminal client you need the following stuff</p>

<ul>
<li>1 x USB to serial converter with 3.3V output. Do not use any 5V type, this may damage your UDOO Neo! I use some cheap Chinese <a href="https://hackaday.com/tag/ch341">CH341</a> USB to UART converters. They cost about 3â‚¬ but are not FTDI clones.</li>
<li>3 Jumper wires. It depends on your USB to serial converter if you need male <-> male or female <-> male. I needed female <-> male connectors</li>
<li>1 x <a href="http://www.udoo.org/udoo-neo/">UDOO Neo board</a></li>
<li>1 x Powersupply for the Neo.</li>
<li>1 x Micro SD-Card with the UDOOBuntu or a <a href="http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo/">Yocto build</a> for UDOO Neo</li>
</ul>


<p>For power connection and flashing the SD-Card please have a look at the <a href="http://www.udoo.org/get-started-neo/">getting started guide</a> for UDOO Neo.</p>

<p>Before you plug-in the serial wires you have to remove any power source from the UDOO board. Otherwise you may damage your board. Double check if your adapter is a 3.3V. Connect the ground line (GND) of your USB to serial converter with the PIN 11 of the J7 connector. Then you have to connect the RX and TX PINs. But remember you have to cross them. Why do we need to cross RX and TX?</p>

<p>This is because <code>TX</code> is transmit and if the UDOO Board and your PC are transmitting on the same line nothing is received on both sides. So you have to connect the <code>RX</code> PIN of the UDOO board, PIN 4 of J7, with the <code>TX</code> PIN of your converter. The <code>TX</code>, PIN 2 of J7, from UDOO is connected to the <code>RX</code> PIN of converter.</p>

<p><img src="/images/posts/UDOONeoAndUSBSeriell.png"></p>

<p>After this you can check <a href="http://www.udoo.org/tutorial/connecting-via-serial-cable/">their tutorial how to fire up an Terminal Emulator</a> on your Platform of choice and connect to the NEO at the following settings:</p>

<ul>
<li>115200 kB</li>
<li>8N1</li>
<li>No Flow-Control</li>
</ul>


<p>I do prefer minicom under Linux for this job.</p>

<h1>UDOO Neo direct USB console</h1>

<p>You may have noticed while booting the official <a href="http://www.udoo.org/get-started-neo/">UDOOBuntu image</a> image new disk is suddenly mounted and you have a new network interface connected. And even a new serial interface is available.</p>

<pre><code>[...]
[ 4885.463264] cdc_acm 4-1.4.1.1:1.2: ttyACM0: USB ACM device
[ 4885.463682] usbcore: registered new interface driver cdc_acm
[ 4885.463685] cdc_acm: USB Abstract Control Model driver for USB modems and ISDN adapters
[...]
</code></pre>

<p>You can use minicom with <code>/dev/ttyACM0</code> and the same settings like above.</p>

<pre><code>Ubuntu 14.04.3 LTS udooneo ttyGS0


default username:password is [udooer:udooer]
udooneo login:
</code></pre>

<p>This is absolutely awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweaking Freescales Yocto Community BSP Builds]]></title>
    <link href="http://ch.ege.io/blog/2015/09/22/tweaking-freescales-yocto-community-bsp-builds/"/>
    <updated>2015-09-22T08:42:22+02:00</updated>
    <id>http://ch.ege.io/blog/2015/09/22/tweaking-freescales-yocto-community-bsp-builds</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/scrumnl">Maurice le Rutte</a> asked me on Twitter if it is possible to add support for the first UDOO board and building a <a href="https://en.wikipedia.org/wiki/DirectFB">DirectFB</a> enabled image. After some research it looked like a solution for the DirectFB task should be not that big issue.</p>

<p>I guess you have already a running Yocto environment based on the Freescale BSP comunity layers. To build a DirectFB image some tweaking is needed. You have to add those lines to your <code>conf/local.conf</code></p>

<pre><code>DISTRO_FEATURES_remove = "x11"
DISTRO_FEATURES_remove = "wayland"
DISTRO_FEATURES_append = " directfb"
</code></pre>

<p>The first two lines remove support for wayland and X11 which will conflict with DirectFB and will prevent a successful build. With this modification you can build a DirectFB image. The extra white space in front of directfb is mandatory!</p>

<pre><code>bitbake core-image-directfb
</code></pre>

<p>This is the right time to fetch some coffee.</p>

<p>Another tweak I prefer to do in the <code>conf/local.conf</code> is switching from RPM to IPK as package manager. It is more lightweight and a little bit faster than RPM or DEB. You only have to change the variable <code>PACKAGE_CLASSES</code> to <code>package_ipk</code></p>

<pre><code>PACKAGE_CLASSES ?= "package_ipk"
</code></pre>

<p>At the moment I am working on a Machine configuration for the <a href="http://www.udoo.org/udoo-dual-and-quad/">UDOO Quad board</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenEmbedded Support for the Upcomming UDOO Neo]]></title>
    <link href="http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo/"/>
    <updated>2015-09-19T19:18:03+02:00</updated>
    <id>http://ch.ege.io/blog/2015/09/19/openembedded-support-for-the-upcomming-udoo-neo</id>
    <content type="html"><![CDATA[<p>After beeing part of the <a href="https://www.kickstarter.com/projects/udoo/udoo-neo-raspberry-pi-arduino-wi-fi-bt-40-sensors/?src=i1">Kickstarter campaign</a> for the <a href="http://www.udoo.org/udoo-neo/">UDOO NEO board</a>. I am looking forward to play with this little beast.</p>

<p><img class="center <a" src="href="http://cdn.udoo.org/wp-content/uploads/2015/03/UDOO_neo_up2_ks_funded.png">http://cdn.udoo.org/wp-content/uploads/2015/03/UDOO_neo_up2_ks_funded.png</a>&#8221;></p>

<p>During the meantime I decided to add the <a href="http://www.udoo.org/udoo-neo/">UDOO NEO board</a> to the <a href="https://github.com/Freescale/meta-fsl-arm-extra">Freescale OpenEmbedded community layer</a>. Due to the fact my board did not yet arrived I&rsquo;ve not yet created a patch to ask for integration into the official <a href="https://github.com/Freescale/meta-fsl-arm-extra">Freescale OpenEmbedded community layer</a>. This will be done when I&rsquo;ve tested the layer.</p>

<p>If you are interested in my work you can find my personal fork right <a href="https://github.com/graugans/meta-fsl-arm-extra/">here at github</a>.
You have to use the <a href="https://github.com/graugans/meta-fsl-arm-extra/tree/fido">fido</a> branch. To keep things simple I&rsquo;ve created my own
branch of the <a href="https://github.com/graugans/fsl-community-bsp-platform">fsl-community-bsp-platform</a> repo repository.</p>

<h1>Installing the BSP</h1>

<p>To get the BSP you need to have repo installed and use it as:</p>

<p>Install the repo utility:</p>

<pre><code>$: mkdir ~/bin
$: curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo
$: chmod a+x ~/bin/repo
</code></pre>

<p>Download the BSP source:</p>

<pre><code>$: PATH=${PATH}:~/bin
$: mkdir fsl-community-bsp
$: cd fsl-community-bsp
$: repo init -u https://github.com/graugans/fsl-community-bsp-platform -b fido
$: repo sync
</code></pre>

<p>At the end of the commands you have every metadata you need to start work with.</p>

<h1>Building the Image</h1>

<p>To start a base image build execute the following command on a decent machine and grab some coffee&hellip;</p>

<p>$: source ./setup-environment udooneo-build
$: bitbake core-image-base</p>

<p>If everything was build fine you&rsquo;ll find a SD-Card image right here:</p>

<pre><code>tmp/deploy/images/udooneo/core-image-base-udooneo.sdcard
</code></pre>

<p>You can write this image directly to any supported SD-Card. Plug it into your freshly unboxed UDOO NEO and hopefully have fun. This image is completly untested and you have to use it on your own risk&hellip;</p>

<h1>Creating your personal Toolchain</h1>

<p>If you want to develop your own software for the UDOO Neo you&rsquo;ll need some cross toolchain. This can be achieved very easy with the OpenEmbedded universe.</p>

<pre><code>$ bitbake core-image-base -cpopulate_sdk
</code></pre>

<p>The resulting self extracting shell script you&rsquo;ll find right here:</p>

<pre><code>tmp/deploy/sdk/poky-glibc-x86_64-core-image-base-cortexa9hf-vfp-neon-toolchain-1.8.sh
</code></pre>

<p>In case of any questions just leave a comment on my Blog.</p>
]]></content>
  </entry>
  
</feed>
